
/Users/admin/Desktop/Remys_Labs/Lab17/target/5.3.0/argon/Lab17.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000026c8  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b66e4  000b66e4  000066e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         000000fc  2003e4f8  000b6708  0000e4f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001fc  2003e5f4  2003e5f4  0001e5f4  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b6804  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b6808  000b6808  00016808  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b680e  000b680e  0001680e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b6832  000b6832  00016832  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   00100375  00000000  00000000  00016836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000ffa3  00000000  00000000  00116bab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    000392aa  00000000  00000000  00126b4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000029c8  00000000  00000000  0015fdf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000a4c8  00000000  00000000  001627c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00033abe  00000000  00000000  0016cc88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00037599  00000000  00000000  001a0746  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00138516  00000000  00000000  001d7cdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00007844  00000000  00000000  003101f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <strcmp>:
   b401c:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4020:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4024:	2a01      	cmp	r2, #1
   b4026:	bf28      	it	cs
   b4028:	429a      	cmpcs	r2, r3
   b402a:	d0f7      	beq.n	b401c <strcmp>
   b402c:	1ad0      	subs	r0, r2, r3
   b402e:	4770      	bx	lr

000b4030 <strlen>:
   b4030:	4603      	mov	r3, r0
   b4032:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4036:	2a00      	cmp	r2, #0
   b4038:	d1fb      	bne.n	b4032 <strlen+0x2>
   b403a:	1a18      	subs	r0, r3, r0
   b403c:	3801      	subs	r0, #1
   b403e:	4770      	bx	lr

000b4040 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4040:	4809      	ldr	r0, [pc, #36]	; (b4068 <module_user_pre_init+0x28>)
   b4042:	490a      	ldr	r1, [pc, #40]	; (b406c <module_user_pre_init+0x2c>)
   b4044:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4046:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4048:	d005      	beq.n	b4056 <module_user_pre_init+0x16>
   b404a:	4a09      	ldr	r2, [pc, #36]	; (b4070 <module_user_pre_init+0x30>)
   b404c:	4282      	cmp	r2, r0
   b404e:	d002      	beq.n	b4056 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4050:	1a12      	subs	r2, r2, r0
   b4052:	f002 f88d 	bl	b6170 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4056:	4807      	ldr	r0, [pc, #28]	; (b4074 <module_user_pre_init+0x34>)
   b4058:	4a07      	ldr	r2, [pc, #28]	; (b4078 <module_user_pre_init+0x38>)
   b405a:	2100      	movs	r1, #0
   b405c:	1a12      	subs	r2, r2, r0
   b405e:	f002 f895 	bl	b618c <memset>
    return &link_global_data_start;
}
   b4062:	4801      	ldr	r0, [pc, #4]	; (b4068 <module_user_pre_init+0x28>)
   b4064:	bd08      	pop	{r3, pc}
   b4066:	bf00      	nop
   b4068:	2003e4f8 	.word	0x2003e4f8
   b406c:	000b6708 	.word	0x000b6708
   b4070:	2003e5f4 	.word	0x2003e5f4
   b4074:	2003e5f4 	.word	0x2003e5f4
   b4078:	2003e7f0 	.word	0x2003e7f0

000b407c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b407c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b407e:	4e07      	ldr	r6, [pc, #28]	; (b409c <module_user_init+0x20>)
   b4080:	4c07      	ldr	r4, [pc, #28]	; (b40a0 <module_user_init+0x24>)
    module_user_init_hook();
   b4082:	f001 fee9 	bl	b5e58 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4086:	1ba4      	subs	r4, r4, r6
   b4088:	08a4      	lsrs	r4, r4, #2
   b408a:	2500      	movs	r5, #0
   b408c:	42ac      	cmp	r4, r5
   b408e:	d100      	bne.n	b4092 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4090:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4092:	f856 3b04 	ldr.w	r3, [r6], #4
   b4096:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4098:	3501      	adds	r5, #1
   b409a:	e7f7      	b.n	b408c <module_user_init+0x10>
   b409c:	000b66c0 	.word	0x000b66c0
   b40a0:	000b66e4 	.word	0x000b66e4

000b40a4 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b40a4:	f000 b83a 	b.w	b411c <setup>

000b40a8 <module_user_loop>:
}

void module_user_loop() {
   b40a8:	b508      	push	{r3, lr}
    loop();
   b40aa:	f000 f85d 	bl	b4168 <loop>
    _post_loop();
}
   b40ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b40b2:	f001 be89 	b.w	b5dc8 <_post_loop>

000b40b6 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b40b6:	f000 bf4d 	b.w	b4f54 <malloc>

000b40ba <_Znaj>:
   b40ba:	f000 bf4b 	b.w	b4f54 <malloc>

000b40be <_ZdaPv>:
   b40be:	f000 bf51 	b.w	b4f64 <free>

000b40c2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40c2:	f000 bf4f 	b.w	b4f64 <free>

000b40c6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40c6:	7800      	ldrb	r0, [r0, #0]
   b40c8:	fab0 f080 	clz	r0, r0
   b40cc:	0940      	lsrs	r0, r0, #5
   b40ce:	4770      	bx	lr

000b40d0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40d0:	2301      	movs	r3, #1
   b40d2:	7003      	strb	r3, [r0, #0]
   b40d4:	4770      	bx	lr
	...

000b40d8 <_Z8callbackPcPhj>:
  client.publish(East_R, String(fsm[currentState].output[5]));
  delay(fsm[currentState].waitTime);
  currentState = fsm[currentState].nextState[direction];
}
void callback(char *topic, byte *payload, unsigned int length)
{
   b40d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b40da:	4601      	mov	r1, r0

  String callbackTopic = topic;
   b40dc:	4668      	mov	r0, sp
   b40de:	f001 f996 	bl	b540e <_ZN6StringC1EPK19__FlashStringHelper>

  if (callbackTopic.compareTo(North_Car))
   b40e2:	490b      	ldr	r1, [pc, #44]	; (b4110 <_Z8callbackPcPhj+0x38>)
   b40e4:	4668      	mov	r0, sp
   b40e6:	f001 f9cb 	bl	b5480 <_ZNK6String9compareToERKS_>
   b40ea:	4604      	mov	r4, r0
   b40ec:	b138      	cbz	r0, b40fe <_Z8callbackPcPhj+0x26>
  {
    direction = 1;
   b40ee:	4b09      	ldr	r3, [pc, #36]	; (b4114 <_Z8callbackPcPhj+0x3c>)
   b40f0:	2201      	movs	r2, #1
   b40f2:	601a      	str	r2, [r3, #0]
  String callbackTopic = topic;
   b40f4:	4668      	mov	r0, sp
   b40f6:	f001 f93f 	bl	b5378 <_ZN6StringD1Ev>
  }
  else if (callbackTopic.compareTo(East_Car))
  {
    direction = 0;
  }
   b40fa:	b004      	add	sp, #16
   b40fc:	bd10      	pop	{r4, pc}
  else if (callbackTopic.compareTo(East_Car))
   b40fe:	4906      	ldr	r1, [pc, #24]	; (b4118 <_Z8callbackPcPhj+0x40>)
   b4100:	4668      	mov	r0, sp
   b4102:	f001 f9bd 	bl	b5480 <_ZNK6String9compareToERKS_>
   b4106:	2800      	cmp	r0, #0
   b4108:	d0f4      	beq.n	b40f4 <_Z8callbackPcPhj+0x1c>
    direction = 0;
   b410a:	4b02      	ldr	r3, [pc, #8]	; (b4114 <_Z8callbackPcPhj+0x3c>)
   b410c:	601c      	str	r4, [r3, #0]
   b410e:	e7f1      	b.n	b40f4 <_Z8callbackPcPhj+0x1c>
   b4110:	2003e634 	.word	0x2003e634
   b4114:	2003e6d8 	.word	0x2003e6d8
   b4118:	2003e5f4 	.word	0x2003e5f4

000b411c <setup>:
{
   b411c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  Serial.begin(9600);
   b411e:	f001 fd81 	bl	b5c24 <_Z16_fetch_usbserialv>
  client.connect(System.deviceID());
   b4122:	4c0e      	ldr	r4, [pc, #56]	; (b415c <setup+0x40>)
  Serial.begin(9600);
   b4124:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4128:	f001 fd70 	bl	b5c0c <_ZN9USBSerial5beginEl>
    inline static SleepResult sleep(const hal_pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   b412c:	4668      	mov	r0, sp
   b412e:	f000 fea1 	bl	b4e74 <spark_deviceID>
  client.connect(System.deviceID());
   b4132:	9900      	ldr	r1, [sp, #0]
   b4134:	4620      	mov	r0, r4
   b4136:	f000 fb37 	bl	b47a8 <_ZN4MQTT7connectEPKc>
   b413a:	4668      	mov	r0, sp
   b413c:	f001 f91c 	bl	b5378 <_ZN6StringD1Ev>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b4140:	4b07      	ldr	r3, [pc, #28]	; (b4160 <setup+0x44>)
  client.subscribe(North_Car);
   b4142:	4620      	mov	r0, r4
   b4144:	6819      	ldr	r1, [r3, #0]
   b4146:	f000 fd5e 	bl	b4c06 <_ZN4MQTT9subscribeEPKc>
   b414a:	4b06      	ldr	r3, [pc, #24]	; (b4164 <setup+0x48>)
  client.subscribe(East_Car);
   b414c:	6819      	ldr	r1, [r3, #0]
   b414e:	4620      	mov	r0, r4
}
   b4150:	b004      	add	sp, #16
   b4152:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  client.subscribe(East_Car);
   b4156:	f000 bd56 	b.w	b4c06 <_ZN4MQTT9subscribeEPKc>
   b415a:	bf00      	nop
   b415c:	2003e674 	.word	0x2003e674
   b4160:	2003e634 	.word	0x2003e634
   b4164:	2003e5f4 	.word	0x2003e5f4

000b4168 <loop>:
{
   b4168:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (client.isConnected())
   b416a:	484f      	ldr	r0, [pc, #316]	; (b42a8 <loop+0x140>)
{
   b416c:	b085      	sub	sp, #20
  if (client.isConnected())
   b416e:	f000 fa2b 	bl	b45c8 <_ZN4MQTT11isConnectedEv>
   b4172:	2800      	cmp	r0, #0
   b4174:	f000 8083 	beq.w	b427e <loop+0x116>
    client.loop();
   b4178:	484b      	ldr	r0, [pc, #300]	; (b42a8 <loop+0x140>)
   b417a:	f000 fbfc 	bl	b4976 <_ZN4MQTT4loopEv>
  client.publish(North_G, String(fsm[currentState].output[0]));
   b417e:	4d4b      	ldr	r5, [pc, #300]	; (b42ac <loop+0x144>)
   b4180:	4b4b      	ldr	r3, [pc, #300]	; (b42b0 <loop+0x148>)
   b4182:	4c4c      	ldr	r4, [pc, #304]	; (b42b4 <loop+0x14c>)
   b4184:	681f      	ldr	r7, [r3, #0]
   b4186:	682b      	ldr	r3, [r5, #0]
   b4188:	2624      	movs	r6, #36	; 0x24
   b418a:	4373      	muls	r3, r6
   b418c:	220a      	movs	r2, #10
   b418e:	58e1      	ldr	r1, [r4, r3]
   b4190:	4668      	mov	r0, sp
   b4192:	f001 f962 	bl	b545a <_ZN6StringC1Eih>
   b4196:	9a00      	ldr	r2, [sp, #0]
   b4198:	4843      	ldr	r0, [pc, #268]	; (b42a8 <loop+0x140>)
   b419a:	4639      	mov	r1, r7
   b419c:	f000 fb8f 	bl	b48be <_ZN4MQTT7publishEPKcS1_>
   b41a0:	4668      	mov	r0, sp
   b41a2:	f001 f8e9 	bl	b5378 <_ZN6StringD1Ev>
   b41a6:	4b44      	ldr	r3, [pc, #272]	; (b42b8 <loop+0x150>)
   b41a8:	681f      	ldr	r7, [r3, #0]
  client.publish(North_Y, String(fsm[currentState].output[1]));
   b41aa:	682b      	ldr	r3, [r5, #0]
   b41ac:	fb06 4303 	mla	r3, r6, r3, r4
   b41b0:	220a      	movs	r2, #10
   b41b2:	6859      	ldr	r1, [r3, #4]
   b41b4:	4668      	mov	r0, sp
   b41b6:	f001 f950 	bl	b545a <_ZN6StringC1Eih>
   b41ba:	9a00      	ldr	r2, [sp, #0]
   b41bc:	483a      	ldr	r0, [pc, #232]	; (b42a8 <loop+0x140>)
   b41be:	4639      	mov	r1, r7
   b41c0:	f000 fb7d 	bl	b48be <_ZN4MQTT7publishEPKcS1_>
   b41c4:	4668      	mov	r0, sp
   b41c6:	f001 f8d7 	bl	b5378 <_ZN6StringD1Ev>
   b41ca:	4b3c      	ldr	r3, [pc, #240]	; (b42bc <loop+0x154>)
   b41cc:	681f      	ldr	r7, [r3, #0]
  client.publish(North_R, String(fsm[currentState].output[2]));
   b41ce:	682b      	ldr	r3, [r5, #0]
   b41d0:	fb06 4303 	mla	r3, r6, r3, r4
   b41d4:	220a      	movs	r2, #10
   b41d6:	6899      	ldr	r1, [r3, #8]
   b41d8:	4668      	mov	r0, sp
   b41da:	f001 f93e 	bl	b545a <_ZN6StringC1Eih>
   b41de:	9a00      	ldr	r2, [sp, #0]
   b41e0:	4831      	ldr	r0, [pc, #196]	; (b42a8 <loop+0x140>)
   b41e2:	4639      	mov	r1, r7
   b41e4:	f000 fb6b 	bl	b48be <_ZN4MQTT7publishEPKcS1_>
   b41e8:	4668      	mov	r0, sp
   b41ea:	f001 f8c5 	bl	b5378 <_ZN6StringD1Ev>
   b41ee:	4b34      	ldr	r3, [pc, #208]	; (b42c0 <loop+0x158>)
   b41f0:	681f      	ldr	r7, [r3, #0]
  client.publish(East_G, String(fsm[currentState].output[3]));
   b41f2:	682b      	ldr	r3, [r5, #0]
   b41f4:	fb06 4303 	mla	r3, r6, r3, r4
   b41f8:	220a      	movs	r2, #10
   b41fa:	68d9      	ldr	r1, [r3, #12]
   b41fc:	4668      	mov	r0, sp
   b41fe:	f001 f92c 	bl	b545a <_ZN6StringC1Eih>
   b4202:	9a00      	ldr	r2, [sp, #0]
   b4204:	4828      	ldr	r0, [pc, #160]	; (b42a8 <loop+0x140>)
   b4206:	4639      	mov	r1, r7
   b4208:	f000 fb59 	bl	b48be <_ZN4MQTT7publishEPKcS1_>
   b420c:	4668      	mov	r0, sp
   b420e:	f001 f8b3 	bl	b5378 <_ZN6StringD1Ev>
   b4212:	4b2c      	ldr	r3, [pc, #176]	; (b42c4 <loop+0x15c>)
   b4214:	681f      	ldr	r7, [r3, #0]
  client.publish(East_Y, String(fsm[currentState].output[4]));
   b4216:	682b      	ldr	r3, [r5, #0]
   b4218:	fb06 4303 	mla	r3, r6, r3, r4
   b421c:	220a      	movs	r2, #10
   b421e:	6919      	ldr	r1, [r3, #16]
   b4220:	4668      	mov	r0, sp
   b4222:	f001 f91a 	bl	b545a <_ZN6StringC1Eih>
   b4226:	9a00      	ldr	r2, [sp, #0]
   b4228:	481f      	ldr	r0, [pc, #124]	; (b42a8 <loop+0x140>)
   b422a:	4639      	mov	r1, r7
   b422c:	f000 fb47 	bl	b48be <_ZN4MQTT7publishEPKcS1_>
   b4230:	4668      	mov	r0, sp
   b4232:	f001 f8a1 	bl	b5378 <_ZN6StringD1Ev>
   b4236:	4b24      	ldr	r3, [pc, #144]	; (b42c8 <loop+0x160>)
   b4238:	681f      	ldr	r7, [r3, #0]
  client.publish(East_R, String(fsm[currentState].output[5]));
   b423a:	682b      	ldr	r3, [r5, #0]
   b423c:	fb06 4303 	mla	r3, r6, r3, r4
   b4240:	220a      	movs	r2, #10
   b4242:	6959      	ldr	r1, [r3, #20]
   b4244:	4668      	mov	r0, sp
   b4246:	f001 f908 	bl	b545a <_ZN6StringC1Eih>
   b424a:	9a00      	ldr	r2, [sp, #0]
   b424c:	4816      	ldr	r0, [pc, #88]	; (b42a8 <loop+0x140>)
   b424e:	4639      	mov	r1, r7
   b4250:	f000 fb35 	bl	b48be <_ZN4MQTT7publishEPKcS1_>
   b4254:	4668      	mov	r0, sp
   b4256:	f001 f88f 	bl	b5378 <_ZN6StringD1Ev>
  delay(fsm[currentState].waitTime);
   b425a:	682b      	ldr	r3, [r5, #0]
   b425c:	fb06 4303 	mla	r3, r6, r3, r4
   b4260:	6998      	ldr	r0, [r3, #24]
   b4262:	f000 fea7 	bl	b4fb4 <delay>
  currentState = fsm[currentState].nextState[direction];
   b4266:	4a19      	ldr	r2, [pc, #100]	; (b42cc <loop+0x164>)
   b4268:	682b      	ldr	r3, [r5, #0]
   b426a:	6812      	ldr	r2, [r2, #0]
   b426c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   b4270:	4413      	add	r3, r2
   b4272:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   b4276:	69e3      	ldr	r3, [r4, #28]
   b4278:	602b      	str	r3, [r5, #0]
}
   b427a:	b005      	add	sp, #20
   b427c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b427e:	4668      	mov	r0, sp
   b4280:	f000 fdf8 	bl	b4e74 <spark_deviceID>
    client.connect(System.deviceID());
   b4284:	9900      	ldr	r1, [sp, #0]
   b4286:	4808      	ldr	r0, [pc, #32]	; (b42a8 <loop+0x140>)
   b4288:	f000 fa8e 	bl	b47a8 <_ZN4MQTT7connectEPKc>
   b428c:	4668      	mov	r0, sp
   b428e:	f001 f873 	bl	b5378 <_ZN6StringD1Ev>
   b4292:	4b0f      	ldr	r3, [pc, #60]	; (b42d0 <loop+0x168>)
    client.subscribe(North_Car);
   b4294:	4804      	ldr	r0, [pc, #16]	; (b42a8 <loop+0x140>)
   b4296:	6819      	ldr	r1, [r3, #0]
   b4298:	f000 fcb5 	bl	b4c06 <_ZN4MQTT9subscribeEPKc>
   b429c:	4b0d      	ldr	r3, [pc, #52]	; (b42d4 <loop+0x16c>)
    client.subscribe(East_Car);
   b429e:	4802      	ldr	r0, [pc, #8]	; (b42a8 <loop+0x140>)
   b42a0:	6819      	ldr	r1, [r3, #0]
   b42a2:	f000 fcb0 	bl	b4c06 <_ZN4MQTT9subscribeEPKc>
   b42a6:	e76a      	b.n	b417e <loop+0x16>
   b42a8:	2003e674 	.word	0x2003e674
   b42ac:	2003e6d4 	.word	0x2003e6d4
   b42b0:	2003e644 	.word	0x2003e644
   b42b4:	2003e4f8 	.word	0x2003e4f8
   b42b8:	2003e664 	.word	0x2003e664
   b42bc:	2003e654 	.word	0x2003e654
   b42c0:	2003e604 	.word	0x2003e604
   b42c4:	2003e624 	.word	0x2003e624
   b42c8:	2003e614 	.word	0x2003e614
   b42cc:	2003e6d8 	.word	0x2003e6d8
   b42d0:	2003e634 	.word	0x2003e634
   b42d4:	2003e5f4 	.word	0x2003e5f4

000b42d8 <_GLOBAL__sub_I_client>:
   b42d8:	b507      	push	{r0, r1, r2, lr}
SYSTEM_THREAD(ENABLED);
   b42da:	2100      	movs	r1, #0
   b42dc:	2001      	movs	r0, #1
   b42de:	f000 fdad 	bl	b4e3c <system_thread_set_state>
MQTT client("lab.thewcl.com", 1883, callback);
   b42e2:	2300      	movs	r3, #0
   b42e4:	f240 725b 	movw	r2, #1883	; 0x75b
   b42e8:	9300      	str	r3, [sp, #0]
   b42ea:	4914      	ldr	r1, [pc, #80]	; (b433c <_GLOBAL__sub_I_client+0x64>)
   b42ec:	4b14      	ldr	r3, [pc, #80]	; (b4340 <_GLOBAL__sub_I_client+0x68>)
   b42ee:	4815      	ldr	r0, [pc, #84]	; (b4344 <_GLOBAL__sub_I_client+0x6c>)
   b42f0:	f000 f88e 	bl	b4410 <_ZN4MQTTC1EPKctPFvPcPhjEb>
String North_G = "Remy/Lab17/North/g";
   b42f4:	4914      	ldr	r1, [pc, #80]	; (b4348 <_GLOBAL__sub_I_client+0x70>)
   b42f6:	4815      	ldr	r0, [pc, #84]	; (b434c <_GLOBAL__sub_I_client+0x74>)
   b42f8:	f001 f889 	bl	b540e <_ZN6StringC1EPK19__FlashStringHelper>
String North_Y = "Remy/Lab17/North/y";
   b42fc:	4914      	ldr	r1, [pc, #80]	; (b4350 <_GLOBAL__sub_I_client+0x78>)
   b42fe:	4815      	ldr	r0, [pc, #84]	; (b4354 <_GLOBAL__sub_I_client+0x7c>)
   b4300:	f001 f885 	bl	b540e <_ZN6StringC1EPK19__FlashStringHelper>
String North_R = "Remy/Lab17/North/r";
   b4304:	4914      	ldr	r1, [pc, #80]	; (b4358 <_GLOBAL__sub_I_client+0x80>)
   b4306:	4815      	ldr	r0, [pc, #84]	; (b435c <_GLOBAL__sub_I_client+0x84>)
   b4308:	f001 f881 	bl	b540e <_ZN6StringC1EPK19__FlashStringHelper>
String East_G = "Remy/Lab17/East/g";
   b430c:	4914      	ldr	r1, [pc, #80]	; (b4360 <_GLOBAL__sub_I_client+0x88>)
   b430e:	4815      	ldr	r0, [pc, #84]	; (b4364 <_GLOBAL__sub_I_client+0x8c>)
   b4310:	f001 f87d 	bl	b540e <_ZN6StringC1EPK19__FlashStringHelper>
String East_Y = "Remy/Lab17/East/y";
   b4314:	4914      	ldr	r1, [pc, #80]	; (b4368 <_GLOBAL__sub_I_client+0x90>)
   b4316:	4815      	ldr	r0, [pc, #84]	; (b436c <_GLOBAL__sub_I_client+0x94>)
   b4318:	f001 f879 	bl	b540e <_ZN6StringC1EPK19__FlashStringHelper>
String East_R = "Remy/Lab17/East/r";
   b431c:	4914      	ldr	r1, [pc, #80]	; (b4370 <_GLOBAL__sub_I_client+0x98>)
   b431e:	4815      	ldr	r0, [pc, #84]	; (b4374 <_GLOBAL__sub_I_client+0x9c>)
   b4320:	f001 f875 	bl	b540e <_ZN6StringC1EPK19__FlashStringHelper>
String North_Car = "Remy/Lab17/North";
   b4324:	4914      	ldr	r1, [pc, #80]	; (b4378 <_GLOBAL__sub_I_client+0xa0>)
   b4326:	4815      	ldr	r0, [pc, #84]	; (b437c <_GLOBAL__sub_I_client+0xa4>)
   b4328:	f001 f871 	bl	b540e <_ZN6StringC1EPK19__FlashStringHelper>
String East_Car = "Remy/Lab17/East";
   b432c:	4914      	ldr	r1, [pc, #80]	; (b4380 <_GLOBAL__sub_I_client+0xa8>)
   b432e:	4815      	ldr	r0, [pc, #84]	; (b4384 <_GLOBAL__sub_I_client+0xac>)
   b4330:	b003      	add	sp, #12
   b4332:	f85d eb04 	ldr.w	lr, [sp], #4
String East_Car = "Remy/Lab17/East";
   b4336:	f001 b86a 	b.w	b540e <_ZN6StringC1EPK19__FlashStringHelper>
   b433a:	bf00      	nop
   b433c:	000b62e8 	.word	0x000b62e8
   b4340:	000b40d9 	.word	0x000b40d9
   b4344:	2003e674 	.word	0x2003e674
   b4348:	000b62f7 	.word	0x000b62f7
   b434c:	2003e644 	.word	0x2003e644
   b4350:	000b630a 	.word	0x000b630a
   b4354:	2003e664 	.word	0x2003e664
   b4358:	000b631d 	.word	0x000b631d
   b435c:	2003e654 	.word	0x2003e654
   b4360:	000b6330 	.word	0x000b6330
   b4364:	2003e604 	.word	0x2003e604
   b4368:	000b6342 	.word	0x000b6342
   b436c:	2003e624 	.word	0x2003e624
   b4370:	000b6354 	.word	0x000b6354
   b4374:	2003e614 	.word	0x2003e614
   b4378:	000b6366 	.word	0x000b6366
   b437c:	2003e634 	.word	0x2003e634
   b4380:	000b6377 	.word	0x000b6377
   b4384:	2003e5f4 	.word	0x2003e5f4

000b4388 <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   b4388:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   b438c:	b510      	push	{r4, lr}
   b438e:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   b4390:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   b4392:	b113      	cbz	r3, b439a <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   b4394:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b4396:	f000 fc41 	bl	b4c1c <os_mutex_lock>
#endif
#endif
#endif
        }
   b439a:	4620      	mov	r0, r4
   b439c:	bd10      	pop	{r4, pc}

000b439e <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   b439e:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   b43a0:	6803      	ldr	r3, [r0, #0]
   b43a2:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   b43a6:	4604      	mov	r4, r0
            if (mqtt->thread)
   b43a8:	b112      	cbz	r2, b43b0 <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   b43aa:	6d98      	ldr	r0, [r3, #88]	; 0x58
   b43ac:	f000 fc3e 	bl	b4c2c <os_mutex_unlock>
#endif
#endif
#endif
        }
   b43b0:	4620      	mov	r0, r4
   b43b2:	bd10      	pop	{r4, pc}

000b43b4 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   b43b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b43b6:	461f      	mov	r7, r3
   b43b8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b43bc:	4604      	mov	r4, r0
   b43be:	460d      	mov	r5, r1
   b43c0:	4616      	mov	r6, r2
    if (thread) {
   b43c2:	b12b      	cbz	r3, b43d0 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1c>
        this->thread = true;
   b43c4:	2301      	movs	r3, #1
   b43c6:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   b43ca:	3058      	adds	r0, #88	; 0x58
   b43cc:	f000 fc1e 	bl	b4c0c <os_mutex_create>
    }
    this->callback = callback;
   b43d0:	9b08      	ldr	r3, [sp, #32]
   b43d2:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   b43d4:	2300      	movs	r3, #0
   b43d6:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   b43d8:	b106      	cbz	r6, b43dc <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x28>
        this->ip = ip;
   b43da:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   b43dc:	b125      	cbz	r5, b43e8 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x34>
        this->domain = domain;
   b43de:	4629      	mov	r1, r5
   b43e0:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b43e4:	f001 f827 	bl	b5436 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   b43e8:	9b06      	ldr	r3, [sp, #24]
   b43ea:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b43ec:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   b43ee:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   b43f0:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b43f4:	2bff      	cmp	r3, #255	; 0xff
   b43f6:	bfb8      	it	lt
   b43f8:	23ff      	movlt	r3, #255	; 0xff
   b43fa:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   b43fe:	b108      	cbz	r0, b4404 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x50>
      delete[] buffer;
   b4400:	f7ff fe5d 	bl	b40be <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   b4404:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   b4408:	f7ff fe57 	bl	b40ba <_Znaj>
   b440c:	61e0      	str	r0, [r4, #28]
}
   b440e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4410 <_ZN4MQTTC1EPKctPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b4410:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b4414:	4604      	mov	r4, r0
            bool thread) {
   b4416:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b4418:	4617      	mov	r7, r2
   b441a:	4698      	mov	r8, r3
   b441c:	460e      	mov	r6, r1
            bool thread) {
   b441e:	f001 fb33 	bl	b5a88 <_ZN9TCPClientC1Ev>
   b4422:	490d      	ldr	r1, [pc, #52]	; (b4458 <_ZN4MQTTC1EPKctPFvPcPhjEb+0x48>)
   b4424:	61e5      	str	r5, [r4, #28]
   b4426:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b442a:	f000 fff0 	bl	b540e <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b442e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
            bool thread) {
   b4432:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b4434:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b4438:	22ff      	movs	r2, #255	; 0xff
   b443a:	230f      	movs	r3, #15
   b443c:	e9cd 3200 	strd	r3, r2, [sp]
   b4440:	4620      	mov	r0, r4
            bool thread) {
   b4442:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b4446:	463b      	mov	r3, r7
   b4448:	462a      	mov	r2, r5
   b444a:	4631      	mov	r1, r6
   b444c:	f7ff ffb2 	bl	b43b4 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
   b4450:	4620      	mov	r0, r4
   b4452:	b004      	add	sp, #16
   b4454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4458:	000b66bc 	.word	0x000b66bc

000b445c <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   b445c:	b510      	push	{r4, lr}
   b445e:	4604      	mov	r4, r0
    while(!_client.available()) {}
   b4460:	4620      	mov	r0, r4
   b4462:	f001 fa6d 	bl	b5940 <_ZN9TCPClient9availableEv>
   b4466:	2800      	cmp	r0, #0
   b4468:	d0fa      	beq.n	b4460 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   b446a:	4620      	mov	r0, r4
   b446c:	f001 f852 	bl	b5514 <_ZN9TCPClient4readEv>
}
   b4470:	b2c0      	uxtb	r0, r0
   b4472:	bd10      	pop	{r4, pc}

000b4474 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   b4474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4478:	4605      	mov	r5, r0
   b447a:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   b447c:	f7ff ffee 	bl	b445c <_ZN4MQTT8readByteEv>
   b4480:	69eb      	ldr	r3, [r5, #28]
   b4482:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b4484:	69eb      	ldr	r3, [r5, #28]
   b4486:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   b448a:	f04f 0901 	mov.w	r9, #1
   b448e:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   b4492:	2700      	movs	r7, #0
    buffer[len++] = readByte();
   b4494:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   b4496:	4628      	mov	r0, r5
   b4498:	f7ff ffe0 	bl	b445c <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   b449c:	4626      	mov	r6, r4
   b449e:	69eb      	ldr	r3, [r5, #28]
   b44a0:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   b44a2:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   b44a6:	fb13 f309 	smulbb	r3, r3, r9
   b44aa:	441f      	add	r7, r3
        buffer[len++] = digit;
   b44ac:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   b44ae:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   b44b0:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   b44b2:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b44b4:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   b44b8:	d4ed      	bmi.n	b4496 <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
   b44ba:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   b44bc:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   b44c0:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b44c4:	d11e      	bne.n	b4504 <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   b44c6:	4628      	mov	r0, r5
   b44c8:	f7ff ffc8 	bl	b445c <_ZN4MQTT8readByteEv>
   b44cc:	69eb      	ldr	r3, [r5, #28]
   b44ce:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
   b44d0:	4628      	mov	r0, r5
   b44d2:	f7ff ffc3 	bl	b445c <_ZN4MQTT8readByteEv>
   b44d6:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
   b44d8:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   b44da:	b2b6      	uxth	r6, r6
   b44dc:	69eb      	ldr	r3, [r5, #28]
   b44de:	b2a4      	uxth	r4, r4
   b44e0:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   b44e2:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   b44e4:	b2b6      	uxth	r6, r6
   b44e6:	42be      	cmp	r6, r7
   b44e8:	d20e      	bcs.n	b4508 <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
   b44ea:	4628      	mov	r0, r5
   b44ec:	f7ff ffb6 	bl	b445c <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   b44f0:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   b44f4:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   b44f6:	bf84      	itt	hi
   b44f8:	69eb      	ldrhi	r3, [r5, #28]
   b44fa:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   b44fc:	3401      	adds	r4, #1
   b44fe:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
   b4500:	3601      	adds	r6, #1
   b4502:	e7ef      	b.n	b44e4 <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
   b4504:	2600      	movs	r6, #0
   b4506:	e7ed      	b.n	b44e4 <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
   b4508:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   b450c:	42a3      	cmp	r3, r4
   b450e:	bf2c      	ite	cs
   b4510:	4620      	movcs	r0, r4
   b4512:	2000      	movcc	r0, #0
   b4514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b4518 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b4518:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b451c:	4615      	mov	r5, r2
   b451e:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   b4520:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b4522:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b4524:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   b4526:	4696      	mov	lr, r2
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   b4528:	a802      	add	r0, sp, #8
        digit = len % 128;
   b452a:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b452e:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b4532:	f103 0401 	add.w	r4, r3, #1
   b4536:	4403      	add	r3, r0
            digit |= 0x80;
   b4538:	bf88      	it	hi
   b453a:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        llen++;
    } while(len > 0);
   b453e:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b4542:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b4546:	b2e4      	uxtb	r4, r4
   b4548:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
   b454c:	d81e      	bhi.n	b458c <_ZN4MQTT5writeEhPht+0x74>

    buf[4-llen] = header;
   b454e:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
   b4552:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b4556:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b4558:	4622      	mov	r2, r4
   b455a:	a901      	add	r1, sp, #4
   b455c:	4428      	add	r0, r5
    buf[4-llen] = header;
   b455e:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b4562:	f001 fe05 	bl	b6170 <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   b4566:	1c72      	adds	r2, r6, #1
   b4568:	4422      	add	r2, r4
   b456a:	4641      	mov	r1, r8
   b456c:	4638      	mov	r0, r7
   b456e:	f000 ffbc 	bl	b54ea <_ZN9TCPClient5writeEPKhj>
   b4572:	4605      	mov	r5, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4574:	f000 fb72 	bl	b4c5c <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   b4578:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b457a:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   b457c:	4432      	add	r2, r6
   b457e:	b2a8      	uxth	r0, r5
}
   b4580:	1a13      	subs	r3, r2, r0
   b4582:	4258      	negs	r0, r3
   b4584:	4158      	adcs	r0, r3
   b4586:	b002      	add	sp, #8
   b4588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b458c:	4623      	mov	r3, r4
   b458e:	e7ca      	b.n	b4526 <_ZN4MQTT5writeEhPht+0xe>

000b4590 <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   b4590:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b4592:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4594:	4605      	mov	r5, r0
    pos += 2;
   b4596:	b298      	uxth	r0, r3
   b4598:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   b459a:	5cce      	ldrb	r6, [r1, r3]
   b459c:	b29c      	uxth	r4, r3
   b459e:	b156      	cbz	r6, b45b6 <_ZN4MQTT11writeStringEPKcPht+0x26>
   b45a0:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
   b45a4:	4584      	cmp	ip, r0
   b45a6:	f103 0701 	add.w	r7, r3, #1
   b45aa:	d904      	bls.n	b45b6 <_ZN4MQTT11writeStringEPKcPht+0x26>
        buf[pos++] = *idp++;
   b45ac:	1c44      	adds	r4, r0, #1
   b45ae:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   b45b0:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   b45b2:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
   b45b4:	e7f1      	b.n	b459a <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   b45b6:	b299      	uxth	r1, r3
   b45b8:	1a41      	subs	r1, r0, r1
   b45ba:	440a      	add	r2, r1
   b45bc:	0a21      	lsrs	r1, r4, #8
   b45be:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b45c2:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   b45c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b45c8 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   b45c8:	b538      	push	{r3, r4, r5, lr}
   b45ca:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   b45cc:	f001 f8da 	bl	b5784 <_ZN9TCPClient9connectedEv>
   b45d0:	2800      	cmp	r0, #0
   b45d2:	bf14      	ite	ne
   b45d4:	2501      	movne	r5, #1
   b45d6:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   b45d8:	d102      	bne.n	b45e0 <_ZN4MQTT11isConnectedEv+0x18>
   b45da:	4620      	mov	r0, r4
   b45dc:	f001 fa0a 	bl	b59f4 <_ZN9TCPClient4stopEv>
    return rc;
}
   b45e0:	4628      	mov	r0, r5
   b45e2:	bd38      	pop	{r3, r4, r5, pc}

000b45e4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   b45e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b45e8:	b088      	sub	sp, #32
   b45ea:	4604      	mov	r4, r0
   b45ec:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   b45f0:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b45f4:	4689      	mov	r9, r1
   b45f6:	4617      	mov	r7, r2
   b45f8:	461e      	mov	r6, r3
    if (!isConnected()) {
   b45fa:	f7ff ffe5 	bl	b45c8 <_ZN4MQTT11isConnectedEv>
   b45fe:	4605      	mov	r5, r0
   b4600:	2800      	cmp	r0, #0
   b4602:	f040 80cd 	bne.w	b47a0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
   b4606:	4621      	mov	r1, r4
   b4608:	a801      	add	r0, sp, #4
   b460a:	f7ff febd 	bl	b4388 <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   b460e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b4610:	2900      	cmp	r1, #0
   b4612:	f040 8088 	bne.w	b4726 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
   b4616:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b461a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b461c:	462b      	mov	r3, r5
   b461e:	4620      	mov	r0, r4
   b4620:	f001 f832 	bl	b5688 <_ZN9TCPClient7connectEPKctm>
        if (result) {
   b4624:	2800      	cmp	r0, #0
   b4626:	d07a      	beq.n	b471e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
   b4628:	2301      	movs	r3, #1
   b462a:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   b462c:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b4630:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
   b4632:	2b04      	cmp	r3, #4
   b4634:	4b5b      	ldr	r3, [pc, #364]	; (b47a4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   b4636:	f040 8081 	bne.w	b473c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   b463a:	6818      	ldr	r0, [r3, #0]
   b463c:	8899      	ldrh	r1, [r3, #4]
   b463e:	799b      	ldrb	r3, [r3, #6]
   b4640:	f8ad 100c 	strh.w	r1, [sp, #12]
   b4644:	f88d 300e 	strb.w	r3, [sp, #14]
   b4648:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b464a:	f8c2 0005 	str.w	r0, [r2, #5]
   b464e:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b4652:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b4656:	f8a2 1009 	strh.w	r1, [r2, #9]
   b465a:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   b465c:	230c      	movs	r3, #12
            if (willTopic) {
   b465e:	f1b8 0f00 	cmp.w	r8, #0
   b4662:	f000 8081 	beq.w	b4768 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b4666:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   b466a:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   b466e:	0140      	lsls	r0, r0, #5
   b4670:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   b4674:	f040 0006 	orr.w	r0, r0, #6
   b4678:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   b467a:	f1ba 0f00 	cmp.w	sl, #0
   b467e:	d101      	bne.n	b4684 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
   b4680:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   b4684:	b11f      	cbz	r7, b468e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
   b4686:	2e00      	cmp	r6, #0
   b4688:	d170      	bne.n	b476c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
   b468a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   b468e:	69e2      	ldr	r2, [r4, #28]
   b4690:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   b4692:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b4694:	69e1      	ldr	r1, [r4, #28]
   b4696:	1c58      	adds	r0, r3, #1
   b4698:	1212      	asrs	r2, r2, #8
   b469a:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   b469c:	1c9a      	adds	r2, r3, #2
   b469e:	69e1      	ldr	r1, [r4, #28]
   b46a0:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b46a2:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   b46a4:	3303      	adds	r3, #3
   b46a6:	69e2      	ldr	r2, [r4, #28]
   b46a8:	4649      	mov	r1, r9
   b46aa:	4620      	mov	r0, r4
   b46ac:	f7ff ff70 	bl	b4590 <_ZN4MQTT11writeStringEPKcPht>
   b46b0:	4603      	mov	r3, r0
            if (willTopic) {
   b46b2:	f1b8 0f00 	cmp.w	r8, #0
   b46b6:	d00b      	beq.n	b46d0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
   b46b8:	69e2      	ldr	r2, [r4, #28]
   b46ba:	4641      	mov	r1, r8
   b46bc:	4620      	mov	r0, r4
   b46be:	f7ff ff67 	bl	b4590 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   b46c2:	69e2      	ldr	r2, [r4, #28]
   b46c4:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   b46c6:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   b46c8:	4620      	mov	r0, r4
   b46ca:	f7ff ff61 	bl	b4590 <_ZN4MQTT11writeStringEPKcPht>
   b46ce:	4603      	mov	r3, r0
            if(user != NULL) {
   b46d0:	b167      	cbz	r7, b46ec <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
   b46d2:	69e2      	ldr	r2, [r4, #28]
   b46d4:	4639      	mov	r1, r7
   b46d6:	4620      	mov	r0, r4
   b46d8:	f7ff ff5a 	bl	b4590 <_ZN4MQTT11writeStringEPKcPht>
   b46dc:	4603      	mov	r3, r0
                if(pass != NULL) {
   b46de:	b12e      	cbz	r6, b46ec <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
   b46e0:	69e2      	ldr	r2, [r4, #28]
   b46e2:	4631      	mov	r1, r6
   b46e4:	4620      	mov	r0, r4
   b46e6:	f7ff ff53 	bl	b4590 <_ZN4MQTT11writeStringEPKcPht>
   b46ea:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   b46ec:	3b05      	subs	r3, #5
   b46ee:	69e2      	ldr	r2, [r4, #28]
   b46f0:	b29b      	uxth	r3, r3
   b46f2:	2110      	movs	r1, #16
   b46f4:	4620      	mov	r0, r4
   b46f6:	f7ff ff0f 	bl	b4518 <_ZN4MQTT5writeEhPht>
   b46fa:	f000 faaf 	bl	b4c5c <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b46fe:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   b4702:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   b4706:	4620      	mov	r0, r4
   b4708:	f001 f91a 	bl	b5940 <_ZN9TCPClient9availableEv>
   b470c:	bb88      	cbnz	r0, b4772 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
   b470e:	f000 faa5 	bl	b4c5c <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   b4712:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b4714:	1ac0      	subs	r0, r0, r3
   b4716:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b4718:	4373      	muls	r3, r6
   b471a:	4298      	cmp	r0, r3
   b471c:	d9f3      	bls.n	b4706 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
   b471e:	4620      	mov	r0, r4
   b4720:	f001 f968 	bl	b59f4 <_ZN9TCPClient4stopEv>
   b4724:	e035      	b.n	b4792 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
   b4726:	a802      	add	r0, sp, #8
   b4728:	f000 fd0c 	bl	b5144 <_ZN9IPAddressC1EPKh>
   b472c:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b4730:	462b      	mov	r3, r5
   b4732:	a902      	add	r1, sp, #8
   b4734:	4620      	mov	r0, r4
   b4736:	f001 f887 	bl	b5848 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b473a:	e773      	b.n	b4624 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   b473c:	f8d3 0007 	ldr.w	r0, [r3, #7]
   b4740:	f8d3 100b 	ldr.w	r1, [r3, #11]
   b4744:	7bdb      	ldrb	r3, [r3, #15]
   b4746:	f10d 0c08 	add.w	ip, sp, #8
   b474a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b474e:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   b4752:	ab02      	add	r3, sp, #8
   b4754:	cb03      	ldmia	r3!, {r0, r1}
   b4756:	f8c2 0005 	str.w	r0, [r2, #5]
   b475a:	f8c2 1009 	str.w	r1, [r2, #9]
   b475e:	f89c 3000 	ldrb.w	r3, [ip]
   b4762:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   b4764:	230e      	movs	r3, #14
   b4766:	e77a      	b.n	b465e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   b4768:	2002      	movs	r0, #2
   b476a:	e786      	b.n	b467a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
   b476c:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   b4770:	e78d      	b.n	b468e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
   b4772:	a902      	add	r1, sp, #8
   b4774:	4620      	mov	r0, r4
   b4776:	f7ff fe7d 	bl	b4474 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   b477a:	2804      	cmp	r0, #4
   b477c:	d1cf      	bne.n	b471e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
   b477e:	69e3      	ldr	r3, [r4, #28]
   b4780:	78de      	ldrb	r6, [r3, #3]
   b4782:	2e00      	cmp	r6, #0
   b4784:	d1cb      	bne.n	b471e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
   b4786:	f000 fa69 	bl	b4c5c <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b478a:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b478c:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   b478e:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   b4792:	a801      	add	r0, sp, #4
   b4794:	f7ff fe03 	bl	b439e <_ZN4MQTT11MutexLockerD1Ev>
}
   b4798:	4628      	mov	r0, r5
   b479a:	b008      	add	sp, #32
   b479c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   b47a0:	2500      	movs	r5, #0
   b47a2:	e7f9      	b.n	b4798 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
   b47a4:	000b62c4 	.word	0x000b62c4

000b47a8 <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
   b47a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   b47aa:	2301      	movs	r3, #1
   b47ac:	2204      	movs	r2, #4
   b47ae:	e9cd 3204 	strd	r3, r2, [sp, #16]
   b47b2:	2300      	movs	r3, #0
   b47b4:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b47b8:	e9cd 3300 	strd	r3, r3, [sp]
   b47bc:	461a      	mov	r2, r3
   b47be:	f7ff ff11 	bl	b45e4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   b47c2:	b007      	add	sp, #28
   b47c4:	f85d fb04 	ldr.w	pc, [sp], #4

000b47c8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b47c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b47cc:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   b47d0:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   b47d4:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   b47d8:	4604      	mov	r4, r0
   b47da:	468b      	mov	fp, r1
   b47dc:	4616      	mov	r6, r2
   b47de:	461f      	mov	r7, r3
    if (isConnected()) {
   b47e0:	f7ff fef2 	bl	b45c8 <_ZN4MQTT11isConnectedEv>
   b47e4:	4682      	mov	sl, r0
   b47e6:	2800      	cmp	r0, #0
   b47e8:	d051      	beq.n	b488e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   b47ea:	4621      	mov	r1, r4
   b47ec:	a801      	add	r0, sp, #4
   b47ee:	f7ff fdcb 	bl	b4388 <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   b47f2:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   b47f6:	69e0      	ldr	r0, [r4, #28]
   b47f8:	2100      	movs	r1, #0
   b47fa:	f001 fcc7 	bl	b618c <memset>
        length = writeString(topic, buffer, length);
   b47fe:	2305      	movs	r3, #5
   b4800:	69e2      	ldr	r2, [r4, #28]
   b4802:	4659      	mov	r1, fp
   b4804:	4620      	mov	r0, r4
   b4806:	f7ff fec3 	bl	b4590 <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   b480a:	1e6b      	subs	r3, r5, #1
   b480c:	2b01      	cmp	r3, #1
   b480e:	d815      	bhi.n	b483c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   b4810:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b4812:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   b4814:	3101      	adds	r1, #1
   b4816:	b289      	uxth	r1, r1
   b4818:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b481a:	0a09      	lsrs	r1, r1, #8
   b481c:	5419      	strb	r1, [r3, r0]
   b481e:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   b4820:	69e3      	ldr	r3, [r4, #28]
   b4822:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b4824:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   b4826:	3002      	adds	r0, #2
   b4828:	5499      	strb	r1, [r3, r2]
   b482a:	b280      	uxth	r0, r0
            if (messageid != NULL)
   b482c:	f1b8 0f00 	cmp.w	r8, #0
   b4830:	d004      	beq.n	b483c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   b4832:	8c23      	ldrh	r3, [r4, #32]
   b4834:	1c5a      	adds	r2, r3, #1
   b4836:	8422      	strh	r2, [r4, #32]
   b4838:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b483c:	2100      	movs	r1, #0
   b483e:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b4840:	428f      	cmp	r7, r1
            buffer[length++] = payload[i];
   b4842:	69e2      	ldr	r2, [r4, #28]
   b4844:	b29b      	uxth	r3, r3
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b4846:	d90a      	bls.n	b485e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   b4848:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   b484c:	459c      	cmp	ip, r3
   b484e:	d906      	bls.n	b485e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   b4850:	f816 c001 	ldrb.w	ip, [r6, r1]
   b4854:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b4858:	3101      	adds	r1, #1
   b485a:	b289      	uxth	r1, r1
   b485c:	e7ef      	b.n	b483e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   b485e:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   b4862:	2900      	cmp	r1, #0
   b4864:	bf0c      	ite	eq
   b4866:	2130      	moveq	r1, #48	; 0x30
   b4868:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   b486a:	f1b9 0f00 	cmp.w	r9, #0
   b486e:	d001      	beq.n	b4874 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   b4870:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   b4874:	2d02      	cmp	r5, #2
   b4876:	d10e      	bne.n	b4896 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   b4878:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   b487c:	3b05      	subs	r3, #5
   b487e:	b29b      	uxth	r3, r3
   b4880:	4620      	mov	r0, r4
   b4882:	f7ff fe49 	bl	b4518 <_ZN4MQTT5writeEhPht>
   b4886:	4682      	mov	sl, r0
        MutexLocker lock(this);
   b4888:	a801      	add	r0, sp, #4
   b488a:	f7ff fd88 	bl	b439e <_ZN4MQTT11MutexLockerD1Ev>
}
   b488e:	4650      	mov	r0, sl
   b4890:	b003      	add	sp, #12
   b4892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   b4896:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   b4898:	bf08      	it	eq
   b489a:	f041 0102 	orreq.w	r1, r1, #2
   b489e:	e7ed      	b.n	b487c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000b48a0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   b48a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   b48a2:	9c08      	ldr	r4, [sp, #32]
   b48a4:	9403      	str	r4, [sp, #12]
   b48a6:	2400      	movs	r4, #0
   b48a8:	9402      	str	r4, [sp, #8]
   b48aa:	f89d 401c 	ldrb.w	r4, [sp, #28]
   b48ae:	9401      	str	r4, [sp, #4]
   b48b0:	f89d 4018 	ldrb.w	r4, [sp, #24]
   b48b4:	9400      	str	r4, [sp, #0]
   b48b6:	f7ff ff87 	bl	b47c8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   b48ba:	b004      	add	sp, #16
   b48bc:	bd10      	pop	{r4, pc}

000b48be <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   b48be:	b530      	push	{r4, r5, lr}
   b48c0:	b087      	sub	sp, #28
   b48c2:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b48c4:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   b48c6:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b48c8:	9204      	str	r2, [sp, #16]
   b48ca:	f7ff fbb1 	bl	b4030 <strlen>
   b48ce:	2500      	movs	r5, #0
   b48d0:	4603      	mov	r3, r0
   b48d2:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b48d6:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b48da:	9500      	str	r5, [sp, #0]
   b48dc:	4620      	mov	r0, r4
   b48de:	f7ff ffdf 	bl	b48a0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   b48e2:	b007      	add	sp, #28
   b48e4:	bd30      	pop	{r4, r5, pc}

000b48e6 <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   b48e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b48e8:	4604      	mov	r4, r0
   b48ea:	460e      	mov	r6, r1
    if (isConnected()) {
   b48ec:	f7ff fe6c 	bl	b45c8 <_ZN4MQTT11isConnectedEv>
   b48f0:	4605      	mov	r5, r0
   b48f2:	b1c8      	cbz	r0, b4928 <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   b48f4:	4621      	mov	r1, r4
   b48f6:	a801      	add	r0, sp, #4
   b48f8:	f7ff fd46 	bl	b4388 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   b48fc:	69e3      	ldr	r3, [r4, #28]
   b48fe:	2262      	movs	r2, #98	; 0x62
   b4900:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b4902:	69e3      	ldr	r3, [r4, #28]
   b4904:	2202      	movs	r2, #2
   b4906:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b4908:	69e3      	ldr	r3, [r4, #28]
   b490a:	0a32      	lsrs	r2, r6, #8
   b490c:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b490e:	69e3      	ldr	r3, [r4, #28]
   b4910:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b4912:	69e1      	ldr	r1, [r4, #28]
   b4914:	2204      	movs	r2, #4
   b4916:	4620      	mov	r0, r4
   b4918:	f000 fde7 	bl	b54ea <_ZN9TCPClient5writeEPKhj>
   b491c:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b491e:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b4920:	bf18      	it	ne
   b4922:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b4924:	f7ff fd3b 	bl	b439e <_ZN4MQTT11MutexLockerD1Ev>
}
   b4928:	4628      	mov	r0, r5
   b492a:	b002      	add	sp, #8
   b492c:	bd70      	pop	{r4, r5, r6, pc}

000b492e <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   b492e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4930:	4604      	mov	r4, r0
   b4932:	460e      	mov	r6, r1
    if (isConnected()) {
   b4934:	f7ff fe48 	bl	b45c8 <_ZN4MQTT11isConnectedEv>
   b4938:	4605      	mov	r5, r0
   b493a:	b1c8      	cbz	r0, b4970 <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   b493c:	4621      	mov	r1, r4
   b493e:	a801      	add	r0, sp, #4
   b4940:	f7ff fd22 	bl	b4388 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   b4944:	69e3      	ldr	r3, [r4, #28]
   b4946:	2272      	movs	r2, #114	; 0x72
   b4948:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b494a:	69e3      	ldr	r3, [r4, #28]
   b494c:	2202      	movs	r2, #2
   b494e:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b4950:	69e3      	ldr	r3, [r4, #28]
   b4952:	0a32      	lsrs	r2, r6, #8
   b4954:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b4956:	69e3      	ldr	r3, [r4, #28]
   b4958:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b495a:	69e1      	ldr	r1, [r4, #28]
   b495c:	2204      	movs	r2, #4
   b495e:	4620      	mov	r0, r4
   b4960:	f000 fdc3 	bl	b54ea <_ZN9TCPClient5writeEPKhj>
   b4964:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b4966:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b4968:	bf18      	it	ne
   b496a:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b496c:	f7ff fd17 	bl	b439e <_ZN4MQTT11MutexLockerD1Ev>
}
   b4970:	4628      	mov	r0, r5
   b4972:	b002      	add	sp, #8
   b4974:	bd70      	pop	{r4, r5, r6, pc}

000b4976 <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   b4976:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b497a:	ed2d 8b02 	vpush	{d8}
   b497e:	b087      	sub	sp, #28
   b4980:	af00      	add	r7, sp, #0
   b4982:	4604      	mov	r4, r0
    if (isConnected()) {
   b4984:	f7ff fe20 	bl	b45c8 <_ZN4MQTT11isConnectedEv>
   b4988:	4681      	mov	r9, r0
   b498a:	b1f8      	cbz	r0, b49cc <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   b498c:	4621      	mov	r1, r4
   b498e:	f107 0014 	add.w	r0, r7, #20
   b4992:	f7ff fcf9 	bl	b4388 <_ZN4MQTT11MutexLockerC1EPS_>
   b4996:	f000 f961 	bl	b4c5c <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   b499a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b499c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b49a0:	4353      	muls	r3, r2
   b49a2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   b49a4:	1a82      	subs	r2, r0, r2
   b49a6:	429a      	cmp	r2, r3
   b49a8:	4606      	mov	r6, r0
   b49aa:	d803      	bhi.n	b49b4 <_ZN4MQTT4loopEv+0x3e>
   b49ac:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b49ae:	1a82      	subs	r2, r0, r2
   b49b0:	4293      	cmp	r3, r2
   b49b2:	d221      	bcs.n	b49f8 <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   b49b4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b49b8:	b17b      	cbz	r3, b49da <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   b49ba:	4620      	mov	r0, r4
   b49bc:	f001 f81a 	bl	b59f4 <_ZN9TCPClient4stopEv>
                return false;
   b49c0:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   b49c4:	f107 0014 	add.w	r0, r7, #20
   b49c8:	f7ff fce9 	bl	b439e <_ZN4MQTT11MutexLockerD1Ev>
}
   b49cc:	4648      	mov	r0, r9
   b49ce:	371c      	adds	r7, #28
   b49d0:	46bd      	mov	sp, r7
   b49d2:	ecbd 8b02 	vpop	{d8}
   b49d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   b49da:	69e2      	ldr	r2, [r4, #28]
   b49dc:	21c0      	movs	r1, #192	; 0xc0
   b49de:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   b49e0:	69e2      	ldr	r2, [r4, #28]
   b49e2:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   b49e4:	69e1      	ldr	r1, [r4, #28]
   b49e6:	2202      	movs	r2, #2
   b49e8:	4620      	mov	r0, r4
   b49ea:	f000 fd7e 	bl	b54ea <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   b49ee:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   b49f2:	2301      	movs	r3, #1
   b49f4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   b49f8:	4620      	mov	r0, r4
   b49fa:	f000 ffa1 	bl	b5940 <_ZN9TCPClient9availableEv>
   b49fe:	2800      	cmp	r0, #0
   b4a00:	d0e0      	beq.n	b49c4 <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   b4a02:	f107 0113 	add.w	r1, r7, #19
   b4a06:	4620      	mov	r0, r4
   b4a08:	f7ff fd34 	bl	b4474 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   b4a0c:	4683      	mov	fp, r0
   b4a0e:	2800      	cmp	r0, #0
   b4a10:	d0d8      	beq.n	b49c4 <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   b4a12:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   b4a14:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   b4a16:	7819      	ldrb	r1, [r3, #0]
   b4a18:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   b4a1c:	2a30      	cmp	r2, #48	; 0x30
   b4a1e:	d17f      	bne.n	b4b20 <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   b4a20:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   b4a24:	f1ba 0f00 	cmp.w	sl, #0
   b4a28:	d0cc      	beq.n	b49c4 <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b4a2a:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   b4a2e:	466a      	mov	r2, sp
   b4a30:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b4a34:	eb03 020c 	add.w	r2, r3, ip
   b4a38:	7851      	ldrb	r1, [r2, #1]
   b4a3a:	7895      	ldrb	r5, [r2, #2]
   b4a3c:	eb05 2501 	add.w	r5, r5, r1, lsl #8
   b4a40:	b2ad      	uxth	r5, r5
                        char topic[tl+1];
   b4a42:	f105 0208 	add.w	r2, r5, #8
   b4a46:	4669      	mov	r1, sp
   b4a48:	08d2      	lsrs	r2, r2, #3
   b4a4a:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   b4a4e:	4695      	mov	sp, r2
   b4a50:	f10c 0203 	add.w	r2, ip, #3
   b4a54:	60fa      	str	r2, [r7, #12]
   b4a56:	eb03 0e02 	add.w	lr, r3, r2
   b4a5a:	eb0d 0205 	add.w	r2, sp, r5
   b4a5e:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   b4a60:	f8c7 d008 	str.w	sp, [r7, #8]
   b4a64:	607a      	str	r2, [r7, #4]
   b4a66:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   b4a6a:	428a      	cmp	r2, r1
   b4a6c:	d006      	beq.n	b4a7c <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   b4a6e:	460a      	mov	r2, r1
   b4a70:	f81e 8b01 	ldrb.w	r8, [lr], #1
   b4a74:	f802 8b01 	strb.w	r8, [r2], #1
   b4a78:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   b4a7a:	e7f4      	b.n	b4a66 <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   b4a7c:	2200      	movs	r2, #0
   b4a7e:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b4a80:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4a84:	68f9      	ldr	r1, [r7, #12]
   b4a86:	f008 0806 	and.w	r8, r8, #6
                            callback(topic,payload,len-llen-3-tl-2);
   b4a8a:	ebab 020c 	sub.w	r2, fp, ip
   b4a8e:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b4a90:	f1b8 0f02 	cmp.w	r8, #2
                            callback(topic,payload,len-llen-3-tl-2);
   b4a94:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4a98:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b4a9a:	d125      	bne.n	b4ae8 <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4a9c:	f813 e001 	ldrb.w	lr, [r3, r1]
   b4aa0:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   b4aa2:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4aa4:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   b4aa8:	f10c 0105 	add.w	r1, ip, #5
   b4aac:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   b4aae:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4ab0:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   b4ab4:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   b4ab6:	69e3      	ldr	r3, [r4, #28]
   b4ab8:	2240      	movs	r2, #64	; 0x40
   b4aba:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   b4abc:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4abe:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   b4ac2:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   b4ac6:	69e3      	ldr	r3, [r4, #28]
   b4ac8:	ea4f 221b 	mov.w	r2, fp, lsr #8
   b4acc:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   b4ace:	69e3      	ldr	r3, [r4, #28]
   b4ad0:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   b4ad4:	69e1      	ldr	r1, [r4, #28]
   b4ad6:	2204      	movs	r2, #4
   b4ad8:	4620      	mov	r0, r4
   b4ada:	f000 fd06 	bl	b54ea <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   b4ade:	6266      	str	r6, [r4, #36]	; 0x24
   b4ae0:	ee18 3a10 	vmov	r3, s16
   b4ae4:	469d      	mov	sp, r3
   b4ae6:	e76d      	b.n	b49c4 <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   b4ae8:	f1b8 0f04 	cmp.w	r8, #4
   b4aec:	d115      	bne.n	b4b1a <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b4aee:	f813 e001 	ldrb.w	lr, [r3, r1]
   b4af2:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b4af4:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b4af6:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   b4afa:	f10c 0105 	add.w	r1, ip, #5
   b4afe:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b4b00:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b4b02:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b4b06:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   b4b08:	69e3      	ldr	r3, [r4, #28]
   b4b0a:	2250      	movs	r2, #80	; 0x50
   b4b0c:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   b4b0e:	69e3      	ldr	r3, [r4, #28]
   b4b10:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b4b12:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   b4b16:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   b4b18:	e7d5      	b.n	b4ac6 <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   b4b1a:	4419      	add	r1, r3
   b4b1c:	47d0      	blx	sl
   b4b1e:	e7df      	b.n	b4ae0 <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   b4b20:	2a50      	cmp	r2, #80	; 0x50
   b4b22:	d108      	bne.n	b4b36 <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   b4b24:	789a      	ldrb	r2, [r3, #2]
   b4b26:	78d9      	ldrb	r1, [r3, #3]
   b4b28:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   b4b2c:	b289      	uxth	r1, r1
   b4b2e:	4620      	mov	r0, r4
   b4b30:	f7ff fed9 	bl	b48e6 <_ZN4MQTT14publishReleaseEt>
   b4b34:	e746      	b.n	b49c4 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   b4b36:	2a40      	cmp	r2, #64	; 0x40
   b4b38:	d112      	bne.n	b4b60 <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   b4b3a:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b4b3c:	2a00      	cmp	r2, #0
   b4b3e:	f43f af41 	beq.w	b49c4 <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   b4b42:	f1bb 0f04 	cmp.w	fp, #4
   b4b46:	f47f af3d 	bne.w	b49c4 <_ZN4MQTT4loopEv+0x4e>
   b4b4a:	f011 0f06 	tst.w	r1, #6
   b4b4e:	f47f af39 	bne.w	b49c4 <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   b4b52:	7899      	ldrb	r1, [r3, #2]
   b4b54:	78d8      	ldrb	r0, [r3, #3]
   b4b56:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   b4b5a:	b280      	uxth	r0, r0
   b4b5c:	4790      	blx	r2
   b4b5e:	e731      	b.n	b49c4 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   b4b60:	2a60      	cmp	r2, #96	; 0x60
   b4b62:	d108      	bne.n	b4b76 <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   b4b64:	789a      	ldrb	r2, [r3, #2]
   b4b66:	78d9      	ldrb	r1, [r3, #3]
   b4b68:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   b4b6c:	b289      	uxth	r1, r1
   b4b6e:	4620      	mov	r0, r4
   b4b70:	f7ff fedd 	bl	b492e <_ZN4MQTT15publishCompleteEt>
   b4b74:	e726      	b.n	b49c4 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   b4b76:	2a70      	cmp	r2, #112	; 0x70
   b4b78:	d0df      	beq.n	b4b3a <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   b4b7a:	2a90      	cmp	r2, #144	; 0x90
   b4b7c:	f43f af22 	beq.w	b49c4 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   b4b80:	2ac0      	cmp	r2, #192	; 0xc0
   b4b82:	d10a      	bne.n	b4b9a <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   b4b84:	22d0      	movs	r2, #208	; 0xd0
   b4b86:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   b4b88:	69e3      	ldr	r3, [r4, #28]
   b4b8a:	2200      	movs	r2, #0
   b4b8c:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   b4b8e:	69e1      	ldr	r1, [r4, #28]
   b4b90:	2202      	movs	r2, #2
   b4b92:	4620      	mov	r0, r4
   b4b94:	f000 fca9 	bl	b54ea <_ZN9TCPClient5writeEPKhj>
   b4b98:	e714      	b.n	b49c4 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   b4b9a:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   b4b9c:	bf04      	itt	eq
   b4b9e:	2300      	moveq	r3, #0
   b4ba0:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   b4ba4:	e70e      	b.n	b49c4 <_ZN4MQTT4loopEv+0x4e>

000b4ba6 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   b4ba6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b4ba8:	4604      	mov	r4, r0
   b4baa:	460f      	mov	r7, r1
   b4bac:	4616      	mov	r6, r2
    if (isConnected()) {
   b4bae:	f7ff fd0b 	bl	b45c8 <_ZN4MQTT11isConnectedEv>
   b4bb2:	4605      	mov	r5, r0
   b4bb4:	b310      	cbz	r0, b4bfc <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
   b4bb6:	4621      	mov	r1, r4
   b4bb8:	a801      	add	r0, sp, #4
   b4bba:	f7ff fbe5 	bl	b4388 <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
   b4bbe:	8c23      	ldrh	r3, [r4, #32]
   b4bc0:	3301      	adds	r3, #1
   b4bc2:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   b4bc4:	b1eb      	cbz	r3, b4c02 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
   b4bc6:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   b4bc8:	8c23      	ldrh	r3, [r4, #32]
   b4bca:	69e2      	ldr	r2, [r4, #28]
   b4bcc:	0a1b      	lsrs	r3, r3, #8
   b4bce:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   b4bd0:	69e3      	ldr	r3, [r4, #28]
   b4bd2:	8c22      	ldrh	r2, [r4, #32]
   b4bd4:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   b4bd6:	69e2      	ldr	r2, [r4, #28]
   b4bd8:	2307      	movs	r3, #7
   b4bda:	4639      	mov	r1, r7
   b4bdc:	4620      	mov	r0, r4
   b4bde:	f7ff fcd7 	bl	b4590 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   b4be2:	69e3      	ldr	r3, [r4, #28]
   b4be4:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   b4be6:	3804      	subs	r0, #4
   b4be8:	b283      	uxth	r3, r0
   b4bea:	69e2      	ldr	r2, [r4, #28]
   b4bec:	2182      	movs	r1, #130	; 0x82
   b4bee:	4620      	mov	r0, r4
   b4bf0:	f7ff fc92 	bl	b4518 <_ZN4MQTT5writeEhPht>
   b4bf4:	4605      	mov	r5, r0
        MutexLocker lock(this);
   b4bf6:	a801      	add	r0, sp, #4
   b4bf8:	f7ff fbd1 	bl	b439e <_ZN4MQTT11MutexLockerD1Ev>
}
   b4bfc:	4628      	mov	r0, r5
   b4bfe:	b003      	add	sp, #12
   b4c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
   b4c02:	2301      	movs	r3, #1
   b4c04:	e7df      	b.n	b4bc6 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

000b4c06 <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
   b4c06:	2200      	movs	r2, #0
   b4c08:	f7ff bfcd 	b.w	b4ba6 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000b4c0c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b4c0c:	b508      	push	{r3, lr}
   b4c0e:	4b02      	ldr	r3, [pc, #8]	; (b4c18 <os_mutex_create+0xc>)
   b4c10:	681b      	ldr	r3, [r3, #0]
   b4c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4c14:	9301      	str	r3, [sp, #4]
   b4c16:	bd08      	pop	{r3, pc}
   b4c18:	00030248 	.word	0x00030248

000b4c1c <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b4c1c:	b508      	push	{r3, lr}
   b4c1e:	4b02      	ldr	r3, [pc, #8]	; (b4c28 <os_mutex_lock+0xc>)
   b4c20:	681b      	ldr	r3, [r3, #0]
   b4c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b4c24:	9301      	str	r3, [sp, #4]
   b4c26:	bd08      	pop	{r3, pc}
   b4c28:	00030248 	.word	0x00030248

000b4c2c <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b4c2c:	b508      	push	{r3, lr}
   b4c2e:	4b02      	ldr	r3, [pc, #8]	; (b4c38 <os_mutex_unlock+0xc>)
   b4c30:	681b      	ldr	r3, [r3, #0]
   b4c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4c34:	9301      	str	r3, [sp, #4]
   b4c36:	bd08      	pop	{r3, pc}
   b4c38:	00030248 	.word	0x00030248

000b4c3c <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4c3c:	b508      	push	{r3, lr}
   b4c3e:	4b02      	ldr	r3, [pc, #8]	; (b4c48 <os_mutex_recursive_create+0xc>)
   b4c40:	681b      	ldr	r3, [r3, #0]
   b4c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4c44:	9301      	str	r3, [sp, #4]
   b4c46:	bd08      	pop	{r3, pc}
   b4c48:	00030248 	.word	0x00030248

000b4c4c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4c4c:	b508      	push	{r3, lr}
   b4c4e:	4b02      	ldr	r3, [pc, #8]	; (b4c58 <HAL_RNG_GetRandomNumber+0xc>)
   b4c50:	681b      	ldr	r3, [r3, #0]
   b4c52:	685b      	ldr	r3, [r3, #4]
   b4c54:	9301      	str	r3, [sp, #4]
   b4c56:	bd08      	pop	{r3, pc}
   b4c58:	00030218 	.word	0x00030218

000b4c5c <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4c5c:	b508      	push	{r3, lr}
   b4c5e:	4b02      	ldr	r3, [pc, #8]	; (b4c68 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4c60:	681b      	ldr	r3, [r3, #0]
   b4c62:	695b      	ldr	r3, [r3, #20]
   b4c64:	9301      	str	r3, [sp, #4]
   b4c66:	bd08      	pop	{r3, pc}
   b4c68:	00030218 	.word	0x00030218

000b4c6c <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b4c6c:	b508      	push	{r3, lr}
   b4c6e:	4b02      	ldr	r3, [pc, #8]	; (b4c78 <if_index_to_name+0xc>)
   b4c70:	681b      	ldr	r3, [r3, #0]
   b4c72:	695b      	ldr	r3, [r3, #20]
   b4c74:	9301      	str	r3, [sp, #4]
   b4c76:	bd08      	pop	{r3, pc}
   b4c78:	0003026c 	.word	0x0003026c

000b4c7c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4c7c:	b508      	push	{r3, lr}
   b4c7e:	4b02      	ldr	r3, [pc, #8]	; (b4c88 <inet_inet_ntop+0xc>)
   b4c80:	681b      	ldr	r3, [r3, #0]
   b4c82:	695b      	ldr	r3, [r3, #20]
   b4c84:	9301      	str	r3, [sp, #4]
   b4c86:	bd08      	pop	{r3, pc}
   b4c88:	00030264 	.word	0x00030264

000b4c8c <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b4c8c:	b508      	push	{r3, lr}
   b4c8e:	4b02      	ldr	r3, [pc, #8]	; (b4c98 <inet_htonl+0xc>)
   b4c90:	681b      	ldr	r3, [r3, #0]
   b4c92:	6a1b      	ldr	r3, [r3, #32]
   b4c94:	9301      	str	r3, [sp, #4]
   b4c96:	bd08      	pop	{r3, pc}
   b4c98:	00030264 	.word	0x00030264

000b4c9c <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b4c9c:	b508      	push	{r3, lr}
   b4c9e:	4b02      	ldr	r3, [pc, #8]	; (b4ca8 <inet_htons+0xc>)
   b4ca0:	681b      	ldr	r3, [r3, #0]
   b4ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4ca4:	9301      	str	r3, [sp, #4]
   b4ca6:	bd08      	pop	{r3, pc}
   b4ca8:	00030264 	.word	0x00030264

000b4cac <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4cac:	b508      	push	{r3, lr}
   b4cae:	4b02      	ldr	r3, [pc, #8]	; (b4cb8 <netdb_freeaddrinfo+0xc>)
   b4cb0:	681b      	ldr	r3, [r3, #0]
   b4cb2:	689b      	ldr	r3, [r3, #8]
   b4cb4:	9301      	str	r3, [sp, #4]
   b4cb6:	bd08      	pop	{r3, pc}
   b4cb8:	00030268 	.word	0x00030268

000b4cbc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4cbc:	b508      	push	{r3, lr}
   b4cbe:	4b02      	ldr	r3, [pc, #8]	; (b4cc8 <netdb_getaddrinfo+0xc>)
   b4cc0:	681b      	ldr	r3, [r3, #0]
   b4cc2:	68db      	ldr	r3, [r3, #12]
   b4cc4:	9301      	str	r3, [sp, #4]
   b4cc6:	bd08      	pop	{r3, pc}
   b4cc8:	00030268 	.word	0x00030268

000b4ccc <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b4ccc:	b508      	push	{r3, lr}
   b4cce:	4b02      	ldr	r3, [pc, #8]	; (b4cd8 <sock_setsockopt+0xc>)
   b4cd0:	681b      	ldr	r3, [r3, #0]
   b4cd2:	699b      	ldr	r3, [r3, #24]
   b4cd4:	9301      	str	r3, [sp, #4]
   b4cd6:	bd08      	pop	{r3, pc}
   b4cd8:	00030238 	.word	0x00030238

000b4cdc <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b4cdc:	b508      	push	{r3, lr}
   b4cde:	4b02      	ldr	r3, [pc, #8]	; (b4ce8 <sock_close+0xc>)
   b4ce0:	681b      	ldr	r3, [r3, #0]
   b4ce2:	69db      	ldr	r3, [r3, #28]
   b4ce4:	9301      	str	r3, [sp, #4]
   b4ce6:	bd08      	pop	{r3, pc}
   b4ce8:	00030238 	.word	0x00030238

000b4cec <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b4cec:	b508      	push	{r3, lr}
   b4cee:	4b02      	ldr	r3, [pc, #8]	; (b4cf8 <sock_connect+0xc>)
   b4cf0:	681b      	ldr	r3, [r3, #0]
   b4cf2:	6a1b      	ldr	r3, [r3, #32]
   b4cf4:	9301      	str	r3, [sp, #4]
   b4cf6:	bd08      	pop	{r3, pc}
   b4cf8:	00030238 	.word	0x00030238

000b4cfc <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b4cfc:	b508      	push	{r3, lr}
   b4cfe:	4b02      	ldr	r3, [pc, #8]	; (b4d08 <sock_recv+0xc>)
   b4d00:	681b      	ldr	r3, [r3, #0]
   b4d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4d04:	9301      	str	r3, [sp, #4]
   b4d06:	bd08      	pop	{r3, pc}
   b4d08:	00030238 	.word	0x00030238

000b4d0c <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b4d0c:	b508      	push	{r3, lr}
   b4d0e:	4b02      	ldr	r3, [pc, #8]	; (b4d18 <sock_send+0xc>)
   b4d10:	681b      	ldr	r3, [r3, #0]
   b4d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4d14:	9301      	str	r3, [sp, #4]
   b4d16:	bd08      	pop	{r3, pc}
   b4d18:	00030238 	.word	0x00030238

000b4d1c <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b4d1c:	b508      	push	{r3, lr}
   b4d1e:	4b02      	ldr	r3, [pc, #8]	; (b4d28 <sock_socket+0xc>)
   b4d20:	681b      	ldr	r3, [r3, #0]
   b4d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b4d24:	9301      	str	r3, [sp, #4]
   b4d26:	bd08      	pop	{r3, pc}
   b4d28:	00030238 	.word	0x00030238

000b4d2c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4d2c:	b508      	push	{r3, lr}
   b4d2e:	4b02      	ldr	r3, [pc, #8]	; (b4d38 <hal_usart_write+0xc>)
   b4d30:	681b      	ldr	r3, [r3, #0]
   b4d32:	68db      	ldr	r3, [r3, #12]
   b4d34:	9301      	str	r3, [sp, #4]
   b4d36:	bd08      	pop	{r3, pc}
   b4d38:	0003023c 	.word	0x0003023c

000b4d3c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4d3c:	b508      	push	{r3, lr}
   b4d3e:	4b02      	ldr	r3, [pc, #8]	; (b4d48 <hal_usart_available+0xc>)
   b4d40:	681b      	ldr	r3, [r3, #0]
   b4d42:	691b      	ldr	r3, [r3, #16]
   b4d44:	9301      	str	r3, [sp, #4]
   b4d46:	bd08      	pop	{r3, pc}
   b4d48:	0003023c 	.word	0x0003023c

000b4d4c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4d4c:	b508      	push	{r3, lr}
   b4d4e:	4b02      	ldr	r3, [pc, #8]	; (b4d58 <hal_usart_read+0xc>)
   b4d50:	681b      	ldr	r3, [r3, #0]
   b4d52:	695b      	ldr	r3, [r3, #20]
   b4d54:	9301      	str	r3, [sp, #4]
   b4d56:	bd08      	pop	{r3, pc}
   b4d58:	0003023c 	.word	0x0003023c

000b4d5c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4d5c:	b508      	push	{r3, lr}
   b4d5e:	4b02      	ldr	r3, [pc, #8]	; (b4d68 <hal_usart_peek+0xc>)
   b4d60:	681b      	ldr	r3, [r3, #0]
   b4d62:	699b      	ldr	r3, [r3, #24]
   b4d64:	9301      	str	r3, [sp, #4]
   b4d66:	bd08      	pop	{r3, pc}
   b4d68:	0003023c 	.word	0x0003023c

000b4d6c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4d6c:	b508      	push	{r3, lr}
   b4d6e:	4b02      	ldr	r3, [pc, #8]	; (b4d78 <hal_usart_flush+0xc>)
   b4d70:	681b      	ldr	r3, [r3, #0]
   b4d72:	69db      	ldr	r3, [r3, #28]
   b4d74:	9301      	str	r3, [sp, #4]
   b4d76:	bd08      	pop	{r3, pc}
   b4d78:	0003023c 	.word	0x0003023c

000b4d7c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4d7c:	b508      	push	{r3, lr}
   b4d7e:	4b02      	ldr	r3, [pc, #8]	; (b4d88 <hal_usart_available_data_for_write+0xc>)
   b4d80:	681b      	ldr	r3, [r3, #0]
   b4d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4d84:	9301      	str	r3, [sp, #4]
   b4d86:	bd08      	pop	{r3, pc}
   b4d88:	0003023c 	.word	0x0003023c

000b4d8c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4d8c:	b508      	push	{r3, lr}
   b4d8e:	4b02      	ldr	r3, [pc, #8]	; (b4d98 <hal_usart_init_ex+0xc>)
   b4d90:	681b      	ldr	r3, [r3, #0]
   b4d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4d94:	9301      	str	r3, [sp, #4]
   b4d96:	bd08      	pop	{r3, pc}
   b4d98:	0003023c 	.word	0x0003023c

000b4d9c <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4d9c:	b508      	push	{r3, lr}
   b4d9e:	4b02      	ldr	r3, [pc, #8]	; (b4da8 <HAL_USB_USART_Init+0xc>)
   b4da0:	681b      	ldr	r3, [r3, #0]
   b4da2:	681b      	ldr	r3, [r3, #0]
   b4da4:	9301      	str	r3, [sp, #4]
   b4da6:	bd08      	pop	{r3, pc}
   b4da8:	0003024c 	.word	0x0003024c

000b4dac <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4dac:	b508      	push	{r3, lr}
   b4dae:	4b02      	ldr	r3, [pc, #8]	; (b4db8 <HAL_USB_USART_Begin+0xc>)
   b4db0:	681b      	ldr	r3, [r3, #0]
   b4db2:	685b      	ldr	r3, [r3, #4]
   b4db4:	9301      	str	r3, [sp, #4]
   b4db6:	bd08      	pop	{r3, pc}
   b4db8:	0003024c 	.word	0x0003024c

000b4dbc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4dbc:	b508      	push	{r3, lr}
   b4dbe:	4b02      	ldr	r3, [pc, #8]	; (b4dc8 <HAL_USB_USART_Available_Data+0xc>)
   b4dc0:	681b      	ldr	r3, [r3, #0]
   b4dc2:	691b      	ldr	r3, [r3, #16]
   b4dc4:	9301      	str	r3, [sp, #4]
   b4dc6:	bd08      	pop	{r3, pc}
   b4dc8:	0003024c 	.word	0x0003024c

000b4dcc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4dcc:	b508      	push	{r3, lr}
   b4dce:	4b02      	ldr	r3, [pc, #8]	; (b4dd8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4dd0:	681b      	ldr	r3, [r3, #0]
   b4dd2:	695b      	ldr	r3, [r3, #20]
   b4dd4:	9301      	str	r3, [sp, #4]
   b4dd6:	bd08      	pop	{r3, pc}
   b4dd8:	0003024c 	.word	0x0003024c

000b4ddc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4ddc:	b508      	push	{r3, lr}
   b4dde:	4b02      	ldr	r3, [pc, #8]	; (b4de8 <HAL_USB_USART_Receive_Data+0xc>)
   b4de0:	681b      	ldr	r3, [r3, #0]
   b4de2:	699b      	ldr	r3, [r3, #24]
   b4de4:	9301      	str	r3, [sp, #4]
   b4de6:	bd08      	pop	{r3, pc}
   b4de8:	0003024c 	.word	0x0003024c

000b4dec <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4dec:	b508      	push	{r3, lr}
   b4dee:	4b02      	ldr	r3, [pc, #8]	; (b4df8 <HAL_USB_USART_Send_Data+0xc>)
   b4df0:	681b      	ldr	r3, [r3, #0]
   b4df2:	69db      	ldr	r3, [r3, #28]
   b4df4:	9301      	str	r3, [sp, #4]
   b4df6:	bd08      	pop	{r3, pc}
   b4df8:	0003024c 	.word	0x0003024c

000b4dfc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4dfc:	b508      	push	{r3, lr}
   b4dfe:	4b02      	ldr	r3, [pc, #8]	; (b4e08 <HAL_USB_USART_Flush_Data+0xc>)
   b4e00:	681b      	ldr	r3, [r3, #0]
   b4e02:	6a1b      	ldr	r3, [r3, #32]
   b4e04:	9301      	str	r3, [sp, #4]
   b4e06:	bd08      	pop	{r3, pc}
   b4e08:	0003024c 	.word	0x0003024c

000b4e0c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b4e0c:	b508      	push	{r3, lr}
   b4e0e:	4b02      	ldr	r3, [pc, #8]	; (b4e18 <log_message+0xc>)
   b4e10:	681b      	ldr	r3, [r3, #0]
   b4e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4e14:	9301      	str	r3, [sp, #4]
   b4e16:	bd08      	pop	{r3, pc}
   b4e18:	00030260 	.word	0x00030260

000b4e1c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4e1c:	b508      	push	{r3, lr}
   b4e1e:	4b02      	ldr	r3, [pc, #8]	; (b4e28 <set_system_mode+0xc>)
   b4e20:	681b      	ldr	r3, [r3, #0]
   b4e22:	685b      	ldr	r3, [r3, #4]
   b4e24:	9301      	str	r3, [sp, #4]
   b4e26:	bd08      	pop	{r3, pc}
   b4e28:	00030220 	.word	0x00030220

000b4e2c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4e2c:	b508      	push	{r3, lr}
   b4e2e:	4b02      	ldr	r3, [pc, #8]	; (b4e38 <system_delay_ms+0xc>)
   b4e30:	681b      	ldr	r3, [r3, #0]
   b4e32:	695b      	ldr	r3, [r3, #20]
   b4e34:	9301      	str	r3, [sp, #4]
   b4e36:	bd08      	pop	{r3, pc}
   b4e38:	00030220 	.word	0x00030220

000b4e3c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b4e3c:	b508      	push	{r3, lr}
   b4e3e:	4b02      	ldr	r3, [pc, #8]	; (b4e48 <system_thread_set_state+0xc>)
   b4e40:	681b      	ldr	r3, [r3, #0]
   b4e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4e44:	9301      	str	r3, [sp, #4]
   b4e46:	bd08      	pop	{r3, pc}
   b4e48:	00030220 	.word	0x00030220

000b4e4c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4e4c:	b508      	push	{r3, lr}
   b4e4e:	4b03      	ldr	r3, [pc, #12]	; (b4e5c <system_ctrl_set_app_request_handler+0x10>)
   b4e50:	681b      	ldr	r3, [r3, #0]
   b4e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4e56:	9301      	str	r3, [sp, #4]
   b4e58:	bd08      	pop	{r3, pc}
   b4e5a:	0000      	.short	0x0000
   b4e5c:	00030220 	.word	0x00030220

000b4e60 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4e60:	b508      	push	{r3, lr}
   b4e62:	4b03      	ldr	r3, [pc, #12]	; (b4e70 <system_ctrl_set_result+0x10>)
   b4e64:	681b      	ldr	r3, [r3, #0]
   b4e66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4e6a:	9301      	str	r3, [sp, #4]
   b4e6c:	bd08      	pop	{r3, pc}
   b4e6e:	0000      	.short	0x0000
   b4e70:	00030220 	.word	0x00030220

000b4e74 <spark_deviceID>:
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b4e74:	b508      	push	{r3, lr}
   b4e76:	4b02      	ldr	r3, [pc, #8]	; (b4e80 <spark_deviceID+0xc>)
   b4e78:	681b      	ldr	r3, [r3, #0]
   b4e7a:	69db      	ldr	r3, [r3, #28]
   b4e7c:	9301      	str	r3, [sp, #4]
   b4e7e:	bd08      	pop	{r3, pc}
   b4e80:	00030244 	.word	0x00030244

000b4e84 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4e84:	b508      	push	{r3, lr}
   b4e86:	4b02      	ldr	r3, [pc, #8]	; (b4e90 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4e88:	681b      	ldr	r3, [r3, #0]
   b4e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4e8c:	9301      	str	r3, [sp, #4]
   b4e8e:	bd08      	pop	{r3, pc}
   b4e90:	00030244 	.word	0x00030244

000b4e94 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4e94:	b508      	push	{r3, lr}
   b4e96:	4b02      	ldr	r3, [pc, #8]	; (b4ea0 <network_connect+0xc>)
   b4e98:	681b      	ldr	r3, [r3, #0]
   b4e9a:	685b      	ldr	r3, [r3, #4]
   b4e9c:	9301      	str	r3, [sp, #4]
   b4e9e:	bd08      	pop	{r3, pc}
   b4ea0:	00030240 	.word	0x00030240

000b4ea4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4ea4:	b508      	push	{r3, lr}
   b4ea6:	4b02      	ldr	r3, [pc, #8]	; (b4eb0 <network_connecting+0xc>)
   b4ea8:	681b      	ldr	r3, [r3, #0]
   b4eaa:	689b      	ldr	r3, [r3, #8]
   b4eac:	9301      	str	r3, [sp, #4]
   b4eae:	bd08      	pop	{r3, pc}
   b4eb0:	00030240 	.word	0x00030240

000b4eb4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4eb4:	b508      	push	{r3, lr}
   b4eb6:	4b02      	ldr	r3, [pc, #8]	; (b4ec0 <network_disconnect+0xc>)
   b4eb8:	681b      	ldr	r3, [r3, #0]
   b4eba:	68db      	ldr	r3, [r3, #12]
   b4ebc:	9301      	str	r3, [sp, #4]
   b4ebe:	bd08      	pop	{r3, pc}
   b4ec0:	00030240 	.word	0x00030240

000b4ec4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4ec4:	b508      	push	{r3, lr}
   b4ec6:	4b02      	ldr	r3, [pc, #8]	; (b4ed0 <network_ready+0xc>)
   b4ec8:	681b      	ldr	r3, [r3, #0]
   b4eca:	691b      	ldr	r3, [r3, #16]
   b4ecc:	9301      	str	r3, [sp, #4]
   b4ece:	bd08      	pop	{r3, pc}
   b4ed0:	00030240 	.word	0x00030240

000b4ed4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4ed4:	b508      	push	{r3, lr}
   b4ed6:	4b02      	ldr	r3, [pc, #8]	; (b4ee0 <network_on+0xc>)
   b4ed8:	681b      	ldr	r3, [r3, #0]
   b4eda:	695b      	ldr	r3, [r3, #20]
   b4edc:	9301      	str	r3, [sp, #4]
   b4ede:	bd08      	pop	{r3, pc}
   b4ee0:	00030240 	.word	0x00030240

000b4ee4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4ee4:	b508      	push	{r3, lr}
   b4ee6:	4b02      	ldr	r3, [pc, #8]	; (b4ef0 <network_off+0xc>)
   b4ee8:	681b      	ldr	r3, [r3, #0]
   b4eea:	699b      	ldr	r3, [r3, #24]
   b4eec:	9301      	str	r3, [sp, #4]
   b4eee:	bd08      	pop	{r3, pc}
   b4ef0:	00030240 	.word	0x00030240

000b4ef4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4ef4:	b508      	push	{r3, lr}
   b4ef6:	4b02      	ldr	r3, [pc, #8]	; (b4f00 <network_listen+0xc>)
   b4ef8:	681b      	ldr	r3, [r3, #0]
   b4efa:	69db      	ldr	r3, [r3, #28]
   b4efc:	9301      	str	r3, [sp, #4]
   b4efe:	bd08      	pop	{r3, pc}
   b4f00:	00030240 	.word	0x00030240

000b4f04 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4f04:	b508      	push	{r3, lr}
   b4f06:	4b02      	ldr	r3, [pc, #8]	; (b4f10 <network_listening+0xc>)
   b4f08:	681b      	ldr	r3, [r3, #0]
   b4f0a:	6a1b      	ldr	r3, [r3, #32]
   b4f0c:	9301      	str	r3, [sp, #4]
   b4f0e:	bd08      	pop	{r3, pc}
   b4f10:	00030240 	.word	0x00030240

000b4f14 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4f14:	b508      	push	{r3, lr}
   b4f16:	4b02      	ldr	r3, [pc, #8]	; (b4f20 <network_set_listen_timeout+0xc>)
   b4f18:	681b      	ldr	r3, [r3, #0]
   b4f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4f1c:	9301      	str	r3, [sp, #4]
   b4f1e:	bd08      	pop	{r3, pc}
   b4f20:	00030240 	.word	0x00030240

000b4f24 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4f24:	b508      	push	{r3, lr}
   b4f26:	4b02      	ldr	r3, [pc, #8]	; (b4f30 <network_get_listen_timeout+0xc>)
   b4f28:	681b      	ldr	r3, [r3, #0]
   b4f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4f2c:	9301      	str	r3, [sp, #4]
   b4f2e:	bd08      	pop	{r3, pc}
   b4f30:	00030240 	.word	0x00030240

000b4f34 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4f34:	b508      	push	{r3, lr}
   b4f36:	4b02      	ldr	r3, [pc, #8]	; (b4f40 <network_is_on+0xc>)
   b4f38:	681b      	ldr	r3, [r3, #0]
   b4f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4f3c:	9301      	str	r3, [sp, #4]
   b4f3e:	bd08      	pop	{r3, pc}
   b4f40:	00030240 	.word	0x00030240

000b4f44 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4f44:	b508      	push	{r3, lr}
   b4f46:	4b02      	ldr	r3, [pc, #8]	; (b4f50 <network_is_off+0xc>)
   b4f48:	681b      	ldr	r3, [r3, #0]
   b4f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4f4c:	9301      	str	r3, [sp, #4]
   b4f4e:	bd08      	pop	{r3, pc}
   b4f50:	00030240 	.word	0x00030240

000b4f54 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4f54:	b508      	push	{r3, lr}
   b4f56:	4b02      	ldr	r3, [pc, #8]	; (b4f60 <malloc+0xc>)
   b4f58:	681b      	ldr	r3, [r3, #0]
   b4f5a:	681b      	ldr	r3, [r3, #0]
   b4f5c:	9301      	str	r3, [sp, #4]
   b4f5e:	bd08      	pop	{r3, pc}
   b4f60:	0003021c 	.word	0x0003021c

000b4f64 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4f64:	b508      	push	{r3, lr}
   b4f66:	4b02      	ldr	r3, [pc, #8]	; (b4f70 <free+0xc>)
   b4f68:	681b      	ldr	r3, [r3, #0]
   b4f6a:	685b      	ldr	r3, [r3, #4]
   b4f6c:	9301      	str	r3, [sp, #4]
   b4f6e:	bd08      	pop	{r3, pc}
   b4f70:	0003021c 	.word	0x0003021c

000b4f74 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b4f74:	b508      	push	{r3, lr}
   b4f76:	4b02      	ldr	r3, [pc, #8]	; (b4f80 <realloc+0xc>)
   b4f78:	681b      	ldr	r3, [r3, #0]
   b4f7a:	689b      	ldr	r3, [r3, #8]
   b4f7c:	9301      	str	r3, [sp, #4]
   b4f7e:	bd08      	pop	{r3, pc}
   b4f80:	0003021c 	.word	0x0003021c

000b4f84 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b4f84:	b508      	push	{r3, lr}
   b4f86:	4b02      	ldr	r3, [pc, #8]	; (b4f90 <__errno+0xc>)
   b4f88:	681b      	ldr	r3, [r3, #0]
   b4f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4f8c:	9301      	str	r3, [sp, #4]
   b4f8e:	bd08      	pop	{r3, pc}
   b4f90:	0003021c 	.word	0x0003021c

000b4f94 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4f94:	b508      	push	{r3, lr}
   b4f96:	4b02      	ldr	r3, [pc, #8]	; (b4fa0 <__assert_func+0xc>)
   b4f98:	681b      	ldr	r3, [r3, #0]
   b4f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4f9c:	9301      	str	r3, [sp, #4]
   b4f9e:	bd08      	pop	{r3, pc}
   b4fa0:	0003021c 	.word	0x0003021c

000b4fa4 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4fa4:	b508      	push	{r3, lr}
   b4fa6:	4b02      	ldr	r3, [pc, #8]	; (b4fb0 <newlib_impure_ptr_callback+0xc>)
   b4fa8:	681b      	ldr	r3, [r3, #0]
   b4faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4fac:	9301      	str	r3, [sp, #4]
   b4fae:	bd08      	pop	{r3, pc}
   b4fb0:	0003021c 	.word	0x0003021c

000b4fb4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b4fb4:	2100      	movs	r1, #0
   b4fb6:	f7ff bf39 	b.w	b4e2c <system_delay_ms>
	...

000b4fbc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4fbc:	4802      	ldr	r0, [pc, #8]	; (b4fc8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4fbe:	2300      	movs	r3, #0
   b4fc0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4fc2:	f7ff be3b 	b.w	b4c3c <os_mutex_recursive_create>
   b4fc6:	bf00      	nop
   b4fc8:	2003e6dc 	.word	0x2003e6dc

000b4fcc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4fcc:	2200      	movs	r2, #0
   b4fce:	6840      	ldr	r0, [r0, #4]
   b4fd0:	4611      	mov	r1, r2
   b4fd2:	f7ff bf97 	b.w	b4f04 <network_listening>

000b4fd6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4fd6:	2200      	movs	r2, #0
   b4fd8:	6840      	ldr	r0, [r0, #4]
   b4fda:	4611      	mov	r1, r2
   b4fdc:	f7ff bfa2 	b.w	b4f24 <network_get_listen_timeout>

000b4fe0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4fe0:	6840      	ldr	r0, [r0, #4]
   b4fe2:	2200      	movs	r2, #0
   b4fe4:	f7ff bf96 	b.w	b4f14 <network_set_listen_timeout>

000b4fe8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4fe8:	6840      	ldr	r0, [r0, #4]
   b4fea:	2200      	movs	r2, #0
   b4fec:	f081 0101 	eor.w	r1, r1, #1
   b4ff0:	f7ff bf80 	b.w	b4ef4 <network_listen>

000b4ff4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4ff4:	2300      	movs	r3, #0
   b4ff6:	6840      	ldr	r0, [r0, #4]
   b4ff8:	461a      	mov	r2, r3
   b4ffa:	4619      	mov	r1, r3
   b4ffc:	f7ff bf72 	b.w	b4ee4 <network_off>

000b5000 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5000:	2300      	movs	r3, #0
   b5002:	6840      	ldr	r0, [r0, #4]
   b5004:	461a      	mov	r2, r3
   b5006:	4619      	mov	r1, r3
   b5008:	f7ff bf64 	b.w	b4ed4 <network_on>

000b500c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b500c:	2200      	movs	r2, #0
   b500e:	6840      	ldr	r0, [r0, #4]
   b5010:	4611      	mov	r1, r2
   b5012:	f7ff bf57 	b.w	b4ec4 <network_ready>

000b5016 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5016:	2200      	movs	r2, #0
   b5018:	6840      	ldr	r0, [r0, #4]
   b501a:	4611      	mov	r1, r2
   b501c:	f7ff bf42 	b.w	b4ea4 <network_connecting>

000b5020 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5020:	6840      	ldr	r0, [r0, #4]
   b5022:	2200      	movs	r2, #0
   b5024:	2102      	movs	r1, #2
   b5026:	f7ff bf45 	b.w	b4eb4 <network_disconnect>

000b502a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b502a:	2300      	movs	r3, #0
   b502c:	6840      	ldr	r0, [r0, #4]
   b502e:	461a      	mov	r2, r3
   b5030:	f7ff bf30 	b.w	b4e94 <network_connect>

000b5034 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5034:	4b02      	ldr	r3, [pc, #8]	; (b5040 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5036:	2203      	movs	r2, #3
   b5038:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b503a:	4a02      	ldr	r2, [pc, #8]	; (b5044 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b503c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b503e:	4770      	bx	lr
   b5040:	2003e6e0 	.word	0x2003e6e0
   b5044:	000b6398 	.word	0x000b6398

000b5048 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5048:	4770      	bx	lr

000b504a <_ZN9IPAddressD0Ev>:
   b504a:	b510      	push	{r4, lr}
   b504c:	2118      	movs	r1, #24
   b504e:	4604      	mov	r4, r0
   b5050:	f7ff f837 	bl	b40c2 <_ZdlPvj>
   b5054:	4620      	mov	r0, r4
   b5056:	bd10      	pop	{r4, pc}

000b5058 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5058:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b505a:	7d03      	ldrb	r3, [r0, #20]
   b505c:	2b06      	cmp	r3, #6
{
   b505e:	b08d      	sub	sp, #52	; 0x34
   b5060:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5062:	f100 0704 	add.w	r7, r0, #4
   b5066:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b506a:	d012      	beq.n	b5092 <_ZNK9IPAddress7printToER5Print+0x3a>
   b506c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5070:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5074:	220a      	movs	r2, #10
   b5076:	4630      	mov	r0, r6
   b5078:	f000 f959 	bl	b532e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b507c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b507e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5080:	d019      	beq.n	b50b6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b5082:	2c00      	cmp	r4, #0
   b5084:	d0f4      	beq.n	b5070 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b5086:	212e      	movs	r1, #46	; 0x2e
   b5088:	4630      	mov	r0, r6
   b508a:	f000 f94d 	bl	b5328 <_ZN5Print5printEc>
   b508e:	4404      	add	r4, r0
   b5090:	e7ee      	b.n	b5070 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5092:	232f      	movs	r3, #47	; 0x2f
   b5094:	466a      	mov	r2, sp
   b5096:	4639      	mov	r1, r7
   b5098:	200a      	movs	r0, #10
		buf[0] = 0;
   b509a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b509e:	f7ff fded 	bl	b4c7c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b50a2:	4668      	mov	r0, sp
   b50a4:	f7fe ffc4 	bl	b4030 <strlen>
   b50a8:	6833      	ldr	r3, [r6, #0]
   b50aa:	4602      	mov	r2, r0
   b50ac:	68db      	ldr	r3, [r3, #12]
   b50ae:	4669      	mov	r1, sp
   b50b0:	4630      	mov	r0, r6
   b50b2:	4798      	blx	r3
   b50b4:	4604      	mov	r4, r0
    }
    return n;
}
   b50b6:	4620      	mov	r0, r4
   b50b8:	b00d      	add	sp, #52	; 0x34
   b50ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b50bc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b50bc:	b510      	push	{r4, lr}
   b50be:	4b05      	ldr	r3, [pc, #20]	; (b50d4 <_ZN9IPAddressC1Ev+0x18>)
   b50c0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b50c2:	2211      	movs	r2, #17
   b50c4:	f840 3b04 	str.w	r3, [r0], #4
   b50c8:	2100      	movs	r1, #0
   b50ca:	f001 f85f 	bl	b618c <memset>
}
   b50ce:	4620      	mov	r0, r4
   b50d0:	bd10      	pop	{r4, pc}
   b50d2:	bf00      	nop
   b50d4:	000b63d4 	.word	0x000b63d4

000b50d8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b50d8:	4603      	mov	r3, r0
   b50da:	4a07      	ldr	r2, [pc, #28]	; (b50f8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b50dc:	b510      	push	{r4, lr}
   b50de:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b50e2:	f101 0210 	add.w	r2, r1, #16
   b50e6:	f851 4b04 	ldr.w	r4, [r1], #4
   b50ea:	f843 4b04 	str.w	r4, [r3], #4
   b50ee:	4291      	cmp	r1, r2
   b50f0:	d1f9      	bne.n	b50e6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b50f2:	780a      	ldrb	r2, [r1, #0]
   b50f4:	701a      	strb	r2, [r3, #0]
}
   b50f6:	bd10      	pop	{r4, pc}
   b50f8:	000b63d4 	.word	0x000b63d4

000b50fc <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b50fc:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b50fe:	2b04      	cmp	r3, #4
   b5100:	d104      	bne.n	b510c <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b5102:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5104:	3800      	subs	r0, #0
   b5106:	bf18      	it	ne
   b5108:	2001      	movne	r0, #1
   b510a:	4770      	bx	lr
    } else if (version() == 6) {
   b510c:	2b06      	cmp	r3, #6
   b510e:	d107      	bne.n	b5120 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5110:	6843      	ldr	r3, [r0, #4]
   b5112:	b93b      	cbnz	r3, b5124 <_ZNK9IPAddresscvbEv+0x28>
   b5114:	6883      	ldr	r3, [r0, #8]
   b5116:	b92b      	cbnz	r3, b5124 <_ZNK9IPAddresscvbEv+0x28>
   b5118:	68c3      	ldr	r3, [r0, #12]
   b511a:	b91b      	cbnz	r3, b5124 <_ZNK9IPAddresscvbEv+0x28>
   b511c:	6900      	ldr	r0, [r0, #16]
   b511e:	e7f1      	b.n	b5104 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b5120:	2000      	movs	r0, #0
   b5122:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5124:	2001      	movs	r0, #1
}
   b5126:	4770      	bx	lr

000b5128 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5128:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b512a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b512e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b5132:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5136:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b513a:	2304      	movs	r3, #4
   b513c:	6041      	str	r1, [r0, #4]
   b513e:	7503      	strb	r3, [r0, #20]
}
   b5140:	bd10      	pop	{r4, pc}
	...

000b5144 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5144:	b507      	push	{r0, r1, r2, lr}
   b5146:	4b06      	ldr	r3, [pc, #24]	; (b5160 <_ZN9IPAddressC1EPKh+0x1c>)
   b5148:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b514a:	78cb      	ldrb	r3, [r1, #3]
   b514c:	9300      	str	r3, [sp, #0]
   b514e:	788b      	ldrb	r3, [r1, #2]
   b5150:	784a      	ldrb	r2, [r1, #1]
   b5152:	7809      	ldrb	r1, [r1, #0]
   b5154:	f7ff ffe8 	bl	b5128 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5158:	b003      	add	sp, #12
   b515a:	f85d fb04 	ldr.w	pc, [sp], #4
   b515e:	bf00      	nop
   b5160:	000b63d4 	.word	0x000b63d4

000b5164 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5164:	4b01      	ldr	r3, [pc, #4]	; (b516c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b5166:	4a02      	ldr	r2, [pc, #8]	; (b5170 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5168:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b516a:	4770      	bx	lr
   b516c:	2003e6e8 	.word	0x2003e6e8
   b5170:	000b63e0 	.word	0x000b63e0

000b5174 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5174:	2300      	movs	r3, #0
   b5176:	6840      	ldr	r0, [r0, #4]
   b5178:	461a      	mov	r2, r3
   b517a:	f7ff be8b 	b.w	b4e94 <network_connect>

000b517e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b517e:	6840      	ldr	r0, [r0, #4]
   b5180:	2200      	movs	r2, #0
   b5182:	2102      	movs	r1, #2
   b5184:	f7ff be96 	b.w	b4eb4 <network_disconnect>

000b5188 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5188:	2200      	movs	r2, #0
   b518a:	6840      	ldr	r0, [r0, #4]
   b518c:	4611      	mov	r1, r2
   b518e:	f7ff be89 	b.w	b4ea4 <network_connecting>

000b5192 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5192:	2200      	movs	r2, #0
   b5194:	6840      	ldr	r0, [r0, #4]
   b5196:	4611      	mov	r1, r2
   b5198:	f7ff be94 	b.w	b4ec4 <network_ready>

000b519c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b519c:	2300      	movs	r3, #0
   b519e:	6840      	ldr	r0, [r0, #4]
   b51a0:	461a      	mov	r2, r3
   b51a2:	4619      	mov	r1, r3
   b51a4:	f7ff be96 	b.w	b4ed4 <network_on>

000b51a8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b51a8:	2300      	movs	r3, #0
   b51aa:	6840      	ldr	r0, [r0, #4]
   b51ac:	461a      	mov	r2, r3
   b51ae:	4619      	mov	r1, r3
   b51b0:	f7ff be98 	b.w	b4ee4 <network_off>

000b51b4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b51b4:	6840      	ldr	r0, [r0, #4]
   b51b6:	2100      	movs	r1, #0
   b51b8:	f7ff bebc 	b.w	b4f34 <network_is_on>

000b51bc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b51bc:	6840      	ldr	r0, [r0, #4]
   b51be:	2100      	movs	r1, #0
   b51c0:	f7ff bec0 	b.w	b4f44 <network_is_off>

000b51c4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b51c4:	6840      	ldr	r0, [r0, #4]
   b51c6:	2200      	movs	r2, #0
   b51c8:	f081 0101 	eor.w	r1, r1, #1
   b51cc:	f7ff be92 	b.w	b4ef4 <network_listen>

000b51d0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b51d0:	6840      	ldr	r0, [r0, #4]
   b51d2:	2200      	movs	r2, #0
   b51d4:	f7ff be9e 	b.w	b4f14 <network_set_listen_timeout>

000b51d8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b51d8:	2200      	movs	r2, #0
   b51da:	6840      	ldr	r0, [r0, #4]
   b51dc:	4611      	mov	r1, r2
   b51de:	f7ff bea1 	b.w	b4f24 <network_get_listen_timeout>

000b51e2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b51e2:	2200      	movs	r2, #0
   b51e4:	6840      	ldr	r0, [r0, #4]
   b51e6:	4611      	mov	r1, r2
   b51e8:	f7ff be8c 	b.w	b4f04 <network_listening>

000b51ec <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b51ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b51f0:	b095      	sub	sp, #84	; 0x54
   b51f2:	4614      	mov	r4, r2
   b51f4:	460d      	mov	r5, r1
   b51f6:	4607      	mov	r7, r0
    IPAddress addr;
   b51f8:	f7ff ff60 	bl	b50bc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b51fc:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b51fe:	221c      	movs	r2, #28
   b5200:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5202:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5204:	f000 ffc2 	bl	b618c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5208:	2340      	movs	r3, #64	; 0x40
   b520a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b520c:	4620      	mov	r0, r4
   b520e:	466b      	mov	r3, sp
   b5210:	aa0c      	add	r2, sp, #48	; 0x30
   b5212:	2100      	movs	r1, #0
   b5214:	f7ff fd52 	bl	b4cbc <netdb_getaddrinfo>
    if (!r) {
   b5218:	4604      	mov	r4, r0
   b521a:	2800      	cmp	r0, #0
   b521c:	d14b      	bne.n	b52b6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b521e:	4602      	mov	r2, r0
   b5220:	2101      	movs	r1, #1
   b5222:	6868      	ldr	r0, [r5, #4]
   b5224:	f7ff fe4e 	bl	b4ec4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5228:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b522a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b522c:	4622      	mov	r2, r4
   b522e:	6868      	ldr	r0, [r5, #4]
   b5230:	f7ff fe48 	bl	b4ec4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5234:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5236:	4681      	mov	r9, r0
        bool ok = false;
   b5238:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b523a:	2e00      	cmp	r6, #0
   b523c:	d03b      	beq.n	b52b6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b523e:	2900      	cmp	r1, #0
   b5240:	d139      	bne.n	b52b6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5242:	6873      	ldr	r3, [r6, #4]
   b5244:	2b02      	cmp	r3, #2
   b5246:	d003      	beq.n	b5250 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5248:	2b0a      	cmp	r3, #10
   b524a:	d011      	beq.n	b5270 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b524c:	69f6      	ldr	r6, [r6, #28]
   b524e:	e7f4      	b.n	b523a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5250:	f1b8 0f00 	cmp.w	r8, #0
   b5254:	d0fa      	beq.n	b524c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5256:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5258:	a806      	add	r0, sp, #24
   b525a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b525c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b525e:	f7ff ff71 	bl	b5144 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5262:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5264:	1d3c      	adds	r4, r7, #4
   b5266:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5268:	682b      	ldr	r3, [r5, #0]
   b526a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b526c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b526e:	e7ed      	b.n	b524c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5270:	f1b9 0f00 	cmp.w	r9, #0
   b5274:	d0ea      	beq.n	b524c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5276:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5278:	2210      	movs	r2, #16
   b527a:	a801      	add	r0, sp, #4
   b527c:	f000 ff86 	bl	b618c <memset>
                    a.v = 6;
   b5280:	2306      	movs	r3, #6
   b5282:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5286:	ad01      	add	r5, sp, #4
   b5288:	f104 0308 	add.w	r3, r4, #8
   b528c:	3418      	adds	r4, #24
   b528e:	6818      	ldr	r0, [r3, #0]
   b5290:	6859      	ldr	r1, [r3, #4]
   b5292:	462a      	mov	r2, r5
   b5294:	c203      	stmia	r2!, {r0, r1}
   b5296:	3308      	adds	r3, #8
   b5298:	42a3      	cmp	r3, r4
   b529a:	4615      	mov	r5, r2
   b529c:	d1f7      	bne.n	b528e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b529e:	a901      	add	r1, sp, #4
   b52a0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b52a2:	ad07      	add	r5, sp, #28
   b52a4:	f7ff ff18 	bl	b50d8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b52a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b52aa:	1d3c      	adds	r4, r7, #4
   b52ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b52ae:	682b      	ldr	r3, [r5, #0]
   b52b0:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b52b2:	4649      	mov	r1, r9
   b52b4:	e7ca      	b.n	b524c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b52b6:	9800      	ldr	r0, [sp, #0]
   b52b8:	f7ff fcf8 	bl	b4cac <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b52bc:	4638      	mov	r0, r7
   b52be:	b015      	add	sp, #84	; 0x54
   b52c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b52c4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b52c4:	4b02      	ldr	r3, [pc, #8]	; (b52d0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b52c6:	4a03      	ldr	r2, [pc, #12]	; (b52d4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b52c8:	601a      	str	r2, [r3, #0]
   b52ca:	2200      	movs	r2, #0
   b52cc:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b52ce:	4770      	bx	lr
   b52d0:	2003e6ec 	.word	0x2003e6ec
   b52d4:	000b63ec 	.word	0x000b63ec

000b52d8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b52d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b52da:	4606      	mov	r6, r0
   b52dc:	460d      	mov	r5, r1
  size_t n = 0;
   b52de:	188f      	adds	r7, r1, r2
   b52e0:	2400      	movs	r4, #0
  while (size--) {
   b52e2:	42bd      	cmp	r5, r7
   b52e4:	d00c      	beq.n	b5300 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b52e6:	6833      	ldr	r3, [r6, #0]
   b52e8:	f815 1b01 	ldrb.w	r1, [r5], #1
   b52ec:	689b      	ldr	r3, [r3, #8]
   b52ee:	4630      	mov	r0, r6
   b52f0:	4798      	blx	r3
     if (chunk>=0)
   b52f2:	1e03      	subs	r3, r0, #0
   b52f4:	db01      	blt.n	b52fa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b52f6:	441c      	add	r4, r3
  while (size--) {
   b52f8:	e7f3      	b.n	b52e2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b52fa:	2c00      	cmp	r4, #0
   b52fc:	bf08      	it	eq
   b52fe:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5300:	4620      	mov	r0, r4
   b5302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5304 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b5304:	b513      	push	{r0, r1, r4, lr}
   b5306:	4604      	mov	r4, r0
    }
   b5308:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b530a:	b159      	cbz	r1, b5324 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b530c:	9101      	str	r1, [sp, #4]
   b530e:	f7fe fe8f 	bl	b4030 <strlen>
   b5312:	6823      	ldr	r3, [r4, #0]
   b5314:	9901      	ldr	r1, [sp, #4]
   b5316:	68db      	ldr	r3, [r3, #12]
   b5318:	4602      	mov	r2, r0
   b531a:	4620      	mov	r0, r4
    }
   b531c:	b002      	add	sp, #8
   b531e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5322:	4718      	bx	r3
    }
   b5324:	b002      	add	sp, #8
   b5326:	bd10      	pop	{r4, pc}

000b5328 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b5328:	6803      	ldr	r3, [r0, #0]
   b532a:	689b      	ldr	r3, [r3, #8]
   b532c:	4718      	bx	r3

000b532e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b532e:	b530      	push	{r4, r5, lr}
   b5330:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5332:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5334:	2a01      	cmp	r2, #1
  *str = '\0';
   b5336:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b533a:	bf98      	it	ls
   b533c:	220a      	movls	r2, #10
   b533e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5340:	460d      	mov	r5, r1
   b5342:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b5346:	fb01 5312 	mls	r3, r1, r2, r5
   b534a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b534e:	2b09      	cmp	r3, #9
   b5350:	bf94      	ite	ls
   b5352:	3330      	addls	r3, #48	; 0x30
   b5354:	3337      	addhi	r3, #55	; 0x37
   b5356:	b2db      	uxtb	r3, r3
  } while(n);
   b5358:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b535a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b535e:	d9ef      	bls.n	b5340 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5360:	4621      	mov	r1, r4
   b5362:	f7ff ffcf 	bl	b5304 <_ZN5Print5writeEPKc>
}
   b5366:	b00b      	add	sp, #44	; 0x2c
   b5368:	bd30      	pop	{r4, r5, pc}
	...

000b536c <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b536c:	4b01      	ldr	r3, [pc, #4]	; (b5374 <_GLOBAL__sub_I_RGB+0x8>)
   b536e:	2200      	movs	r2, #0
   b5370:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b5372:	4770      	bx	lr
   b5374:	2003e6f4 	.word	0x2003e6f4

000b5378 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b5378:	b510      	push	{r4, lr}
   b537a:	4604      	mov	r4, r0
{
	free(buffer);
   b537c:	6800      	ldr	r0, [r0, #0]
   b537e:	f7ff fdf1 	bl	b4f64 <free>
}
   b5382:	4620      	mov	r0, r4
   b5384:	bd10      	pop	{r4, pc}

000b5386 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b5386:	b510      	push	{r4, lr}
   b5388:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b538a:	6800      	ldr	r0, [r0, #0]
   b538c:	b108      	cbz	r0, b5392 <_ZN6String10invalidateEv+0xc>
   b538e:	f7ff fde9 	bl	b4f64 <free>
	buffer = NULL;
   b5392:	2300      	movs	r3, #0
	capacity = len = 0;
   b5394:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b5398:	6023      	str	r3, [r4, #0]
}
   b539a:	bd10      	pop	{r4, pc}

000b539c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b539c:	b538      	push	{r3, r4, r5, lr}
   b539e:	4604      	mov	r4, r0
   b53a0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b53a2:	6800      	ldr	r0, [r0, #0]
   b53a4:	3101      	adds	r1, #1
   b53a6:	f7ff fde5 	bl	b4f74 <realloc>
	if (newbuffer) {
   b53aa:	b110      	cbz	r0, b53b2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b53ac:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b53b0:	2001      	movs	r0, #1
	}
	return 0;
}
   b53b2:	bd38      	pop	{r3, r4, r5, pc}

000b53b4 <_ZN6String7reserveEj>:
{
   b53b4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b53b6:	6803      	ldr	r3, [r0, #0]
{
   b53b8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b53ba:	b123      	cbz	r3, b53c6 <_ZN6String7reserveEj+0x12>
   b53bc:	6843      	ldr	r3, [r0, #4]
   b53be:	428b      	cmp	r3, r1
   b53c0:	d301      	bcc.n	b53c6 <_ZN6String7reserveEj+0x12>
   b53c2:	2001      	movs	r0, #1
}
   b53c4:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b53c6:	4620      	mov	r0, r4
   b53c8:	f7ff ffe8 	bl	b539c <_ZN6String12changeBufferEj>
   b53cc:	2800      	cmp	r0, #0
   b53ce:	d0f9      	beq.n	b53c4 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b53d0:	68a3      	ldr	r3, [r4, #8]
   b53d2:	2b00      	cmp	r3, #0
   b53d4:	d1f5      	bne.n	b53c2 <_ZN6String7reserveEj+0xe>
   b53d6:	6822      	ldr	r2, [r4, #0]
   b53d8:	7013      	strb	r3, [r2, #0]
   b53da:	e7f2      	b.n	b53c2 <_ZN6String7reserveEj+0xe>

000b53dc <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b53dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b53de:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b53e0:	4611      	mov	r1, r2
   b53e2:	9201      	str	r2, [sp, #4]
{
   b53e4:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b53e6:	f7ff ffe5 	bl	b53b4 <_ZN6String7reserveEj>
   b53ea:	9a01      	ldr	r2, [sp, #4]
   b53ec:	b928      	cbnz	r0, b53fa <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b53ee:	4620      	mov	r0, r4
   b53f0:	f7ff ffc9 	bl	b5386 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b53f4:	4620      	mov	r0, r4
   b53f6:	b003      	add	sp, #12
   b53f8:	bd30      	pop	{r4, r5, pc}
	len = length;
   b53fa:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b53fc:	4629      	mov	r1, r5
   b53fe:	6820      	ldr	r0, [r4, #0]
   b5400:	f000 feb6 	bl	b6170 <memcpy>
	buffer[len] = 0;
   b5404:	6822      	ldr	r2, [r4, #0]
   b5406:	68a3      	ldr	r3, [r4, #8]
   b5408:	2100      	movs	r1, #0
   b540a:	54d1      	strb	r1, [r2, r3]
	return *this;
   b540c:	e7f2      	b.n	b53f4 <_ZN6String4copyEPKcj+0x18>

000b540e <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b540e:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b5410:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b5412:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b5416:	4604      	mov	r4, r0
	len = 0;
   b5418:	6083      	str	r3, [r0, #8]
	flags = 0;
   b541a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b541c:	b141      	cbz	r1, b5430 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b541e:	4608      	mov	r0, r1
   b5420:	9101      	str	r1, [sp, #4]
   b5422:	f7fe fe05 	bl	b4030 <strlen>
   b5426:	9901      	ldr	r1, [sp, #4]
   b5428:	4602      	mov	r2, r0
   b542a:	4620      	mov	r0, r4
   b542c:	f7ff ffd6 	bl	b53dc <_ZN6String4copyEPKcj>
}
   b5430:	4620      	mov	r0, r4
   b5432:	b002      	add	sp, #8
   b5434:	bd10      	pop	{r4, pc}

000b5436 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b5436:	b513      	push	{r0, r1, r4, lr}
   b5438:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b543a:	b159      	cbz	r1, b5454 <_ZN6StringaSEPKc+0x1e>
   b543c:	4608      	mov	r0, r1
   b543e:	9101      	str	r1, [sp, #4]
   b5440:	f7fe fdf6 	bl	b4030 <strlen>
   b5444:	9901      	ldr	r1, [sp, #4]
   b5446:	4602      	mov	r2, r0
   b5448:	4620      	mov	r0, r4
   b544a:	f7ff ffc7 	bl	b53dc <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b544e:	4620      	mov	r0, r4
   b5450:	b002      	add	sp, #8
   b5452:	bd10      	pop	{r4, pc}
	else invalidate();
   b5454:	f7ff ff97 	bl	b5386 <_ZN6String10invalidateEv>
   b5458:	e7f9      	b.n	b544e <_ZN6StringaSEPKc+0x18>

000b545a <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b545a:	b510      	push	{r4, lr}
   b545c:	4604      	mov	r4, r0
   b545e:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b5460:	2300      	movs	r3, #0
	capacity = 0;
   b5462:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b5466:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b5468:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b546a:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b546c:	a901      	add	r1, sp, #4
   b546e:	f000 fc73 	bl	b5d58 <itoa>
	*this = buf;
   b5472:	a901      	add	r1, sp, #4
   b5474:	4620      	mov	r0, r4
   b5476:	f7ff ffde 	bl	b5436 <_ZN6StringaSEPKc>
}
   b547a:	4620      	mov	r0, r4
   b547c:	b00a      	add	sp, #40	; 0x28
   b547e:	bd10      	pop	{r4, pc}

000b5480 <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   b5480:	6802      	ldr	r2, [r0, #0]
{
   b5482:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   b5484:	6809      	ldr	r1, [r1, #0]
   b5486:	b162      	cbz	r2, b54a2 <_ZNK6String9compareToERKS_+0x22>
   b5488:	b941      	cbnz	r1, b549c <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   b548a:	6880      	ldr	r0, [r0, #8]
   b548c:	b160      	cbz	r0, b54a8 <_ZNK6String9compareToERKS_+0x28>
   b548e:	7810      	ldrb	r0, [r2, #0]
   b5490:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b5492:	6898      	ldr	r0, [r3, #8]
   b5494:	b140      	cbz	r0, b54a8 <_ZNK6String9compareToERKS_+0x28>
   b5496:	7809      	ldrb	r1, [r1, #0]
   b5498:	4248      	negs	r0, r1
   b549a:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   b549c:	4610      	mov	r0, r2
   b549e:	f7fe bdbd 	b.w	b401c <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b54a2:	2900      	cmp	r1, #0
   b54a4:	d1f5      	bne.n	b5492 <_ZNK6String9compareToERKS_+0x12>
		return 0;
   b54a6:	4608      	mov	r0, r1
}
   b54a8:	4770      	bx	lr
	...

000b54ac <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b54ac:	4b05      	ldr	r3, [pc, #20]	; (b54c4 <_GLOBAL__sub_I_System+0x18>)
   b54ae:	2202      	movs	r2, #2
   b54b0:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b54b2:	4b05      	ldr	r3, [pc, #20]	; (b54c8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b54b4:	4a05      	ldr	r2, [pc, #20]	; (b54cc <_GLOBAL__sub_I_System+0x20>)
   b54b6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b54b8:	2000      	movs	r0, #0
   b54ba:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b54be:	f7ff bcad 	b.w	b4e1c <set_system_mode>
   b54c2:	bf00      	nop
   b54c4:	2003e710 	.word	0x2003e710
   b54c8:	2003e704 	.word	0x2003e704
   b54cc:	ffff0000 	.word	0xffff0000

000b54d0 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b54d0:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b54d2:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b54d4:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b54d8:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b54da:	2201      	movs	r2, #1
   b54dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b54e0:	f10d 0107 	add.w	r1, sp, #7
   b54e4:	47a0      	blx	r4
}
   b54e6:	b002      	add	sp, #8
   b54e8:	bd10      	pop	{r4, pc}

000b54ea <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b54ea:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b54ec:	6803      	ldr	r3, [r0, #0]
   b54ee:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b54f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b54f4:	46a4      	mov	ip, r4
}
   b54f6:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b54fa:	4760      	bx	ip

000b54fc <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b54fc:	b513      	push	{r0, r1, r4, lr}
   b54fe:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b5500:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b5502:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b5506:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b5508:	f10d 0107 	add.w	r1, sp, #7
   b550c:	2201      	movs	r2, #1
   b550e:	47a0      	blx	r4
}
   b5510:	b002      	add	sp, #8
   b5512:	bd10      	pop	{r4, pc}

000b5514 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b5514:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b5516:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b5518:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b551c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5520:	429a      	cmp	r2, r3
int TCPClient::read() {
   b5522:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b5524:	d008      	beq.n	b5538 <_ZN9TCPClient4readEv+0x24>
   b5526:	6963      	ldr	r3, [r4, #20]
   b5528:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b552c:	1c51      	adds	r1, r2, #1
   b552e:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b5532:	4413      	add	r3, r2
   b5534:	7918      	ldrb	r0, [r3, #4]
}
   b5536:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b5538:	6803      	ldr	r3, [r0, #0]
   b553a:	691b      	ldr	r3, [r3, #16]
   b553c:	4798      	blx	r3
   b553e:	2800      	cmp	r0, #0
   b5540:	d1f1      	bne.n	b5526 <_ZN9TCPClient4readEv+0x12>
   b5542:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b5546:	e7f6      	b.n	b5536 <_ZN9TCPClient4readEv+0x22>

000b5548 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b5548:	4770      	bx	lr

000b554a <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b554a:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b554c:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b554e:	43c0      	mvns	r0, r0
   b5550:	0fc0      	lsrs	r0, r0, #31
   b5552:	4770      	bx	lr

000b5554 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5554:	4770      	bx	lr
	...

000b5558 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b5558:	4b06      	ldr	r3, [pc, #24]	; (b5574 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b555a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b555c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b555e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b5562:	d005      	beq.n	b5570 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b5564:	4608      	mov	r0, r1
   b5566:	f000 fceb 	bl	b5f40 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b556a:	2800      	cmp	r0, #0
   b556c:	bf08      	it	eq
   b556e:	2400      	moveq	r4, #0
      }
   b5570:	4620      	mov	r0, r4
   b5572:	bd10      	pop	{r4, pc}
   b5574:	000b6388 	.word	0x000b6388

000b5578 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5578:	b510      	push	{r4, lr}
   b557a:	21ac      	movs	r1, #172	; 0xac
   b557c:	4604      	mov	r4, r0
   b557e:	f7fe fda0 	bl	b40c2 <_ZdlPvj>
   b5582:	4620      	mov	r0, r4
   b5584:	bd10      	pop	{r4, pc}

000b5586 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b5586:	21ac      	movs	r1, #172	; 0xac
   b5588:	f7fe bd9b 	b.w	b40c2 <_ZdlPvj>

000b558c <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b558c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b5590:	f04f 0800 	mov.w	r8, #0
   b5594:	b086      	sub	sp, #24
   b5596:	461c      	mov	r4, r3
   b5598:	f8c0 8004 	str.w	r8, [r0, #4]
   b559c:	4605      	mov	r5, r0
   b559e:	460e      	mov	r6, r1
   b55a0:	4617      	mov	r7, r2
    struct timeval tv = {};
   b55a2:	4641      	mov	r1, r8
   b55a4:	2210      	movs	r2, #16
   b55a6:	a802      	add	r0, sp, #8
   b55a8:	f000 fdf0 	bl	b618c <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b55ac:	1c63      	adds	r3, r4, #1
   b55ae:	d009      	beq.n	b55c4 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b55b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b55b4:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b55b8:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b55bc:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b55c0:	435c      	muls	r4, r3
   b55c2:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b55c4:	6968      	ldr	r0, [r5, #20]
   b55c6:	2310      	movs	r3, #16
   b55c8:	9300      	str	r3, [sp, #0]
   b55ca:	6800      	ldr	r0, [r0, #0]
   b55cc:	ab02      	add	r3, sp, #8
   b55ce:	f241 0205 	movw	r2, #4101	; 0x1005
   b55d2:	f640 71ff 	movw	r1, #4095	; 0xfff
   b55d6:	f7ff fb79 	bl	b4ccc <sock_setsockopt>
    if (ret < 0) {
   b55da:	2800      	cmp	r0, #0
   b55dc:	da07      	bge.n	b55ee <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b55de:	f7ff fcd1 	bl	b4f84 <__errno>
   b55e2:	6803      	ldr	r3, [r0, #0]
   b55e4:	606b      	str	r3, [r5, #4]
        return 0;
   b55e6:	2000      	movs	r0, #0
}
   b55e8:	b006      	add	sp, #24
   b55ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b55ee:	6968      	ldr	r0, [r5, #20]
   b55f0:	2300      	movs	r3, #0
   b55f2:	6800      	ldr	r0, [r0, #0]
   b55f4:	463a      	mov	r2, r7
   b55f6:	4631      	mov	r1, r6
   b55f8:	f7ff fb88 	bl	b4d0c <sock_send>
    if (ret < 0) {
   b55fc:	1e03      	subs	r3, r0, #0
   b55fe:	dbee      	blt.n	b55de <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b5600:	4618      	mov	r0, r3
   b5602:	e7f1      	b.n	b55e8 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b5604 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b5604:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b5606:	6984      	ldr	r4, [r0, #24]
   b5608:	4b0a      	ldr	r3, [pc, #40]	; (b5634 <_ZN9TCPClientD1Ev+0x30>)
   b560a:	6003      	str	r3, [r0, #0]
   b560c:	4605      	mov	r5, r0
   b560e:	b17c      	cbz	r4, b5630 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b5610:	6863      	ldr	r3, [r4, #4]
   b5612:	3b01      	subs	r3, #1
   b5614:	6063      	str	r3, [r4, #4]
   b5616:	b95b      	cbnz	r3, b5630 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b5618:	6823      	ldr	r3, [r4, #0]
   b561a:	4620      	mov	r0, r4
   b561c:	689b      	ldr	r3, [r3, #8]
   b561e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5620:	68a3      	ldr	r3, [r4, #8]
   b5622:	3b01      	subs	r3, #1
   b5624:	60a3      	str	r3, [r4, #8]
   b5626:	b91b      	cbnz	r3, b5630 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b5628:	6823      	ldr	r3, [r4, #0]
   b562a:	4620      	mov	r0, r4
   b562c:	68db      	ldr	r3, [r3, #12]
   b562e:	4798      	blx	r3
   b5630:	4628      	mov	r0, r5
   b5632:	bd38      	pop	{r3, r4, r5, pc}
   b5634:	000b645c 	.word	0x000b645c

000b5638 <_ZN9TCPClientD0Ev>:
   b5638:	b510      	push	{r4, lr}
   b563a:	4604      	mov	r4, r0
   b563c:	f7ff ffe2 	bl	b5604 <_ZN9TCPClientD1Ev>
   b5640:	4620      	mov	r0, r4
   b5642:	211c      	movs	r1, #28
   b5644:	f7fe fd3d 	bl	b40c2 <_ZdlPvj>
   b5648:	4620      	mov	r0, r4
   b564a:	bd10      	pop	{r4, pc}

000b564c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b564c:	b530      	push	{r4, r5, lr}
   b564e:	b087      	sub	sp, #28
   b5650:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b5652:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b5654:	4668      	mov	r0, sp
   b5656:	f7ff fd75 	bl	b5144 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b565a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b565c:	3404      	adds	r4, #4
   b565e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5660:	682b      	ldr	r3, [r5, #0]
   b5662:	7023      	strb	r3, [r4, #0]
    }
   b5664:	b007      	add	sp, #28
   b5666:	bd30      	pop	{r4, r5, pc}

000b5668 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b5668:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b566a:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b566c:	4b05      	ldr	r3, [pc, #20]	; (b5684 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b566e:	4604      	mov	r4, r0
   b5670:	358c      	adds	r5, #140	; 0x8c
   b5672:	f844 3b04 	str.w	r3, [r4], #4
   b5676:	4606      	mov	r6, r0
   b5678:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b567a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b567c:	682b      	ldr	r3, [r5, #0]
   b567e:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b5680:	4630      	mov	r0, r6
   b5682:	bd70      	pop	{r4, r5, r6, pc}
   b5684:	000b63d4 	.word	0x000b63d4

000b5688 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5688:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b568c:	4698      	mov	r8, r3
    stop();
   b568e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5690:	b093      	sub	sp, #76	; 0x4c
   b5692:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b5694:	2400      	movs	r4, #0
    stop();
   b5696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5698:	4606      	mov	r6, r0
   b569a:	4617      	mov	r7, r2
    stop();
   b569c:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b569e:	4628      	mov	r0, r5
   b56a0:	466b      	mov	r3, sp
   b56a2:	4622      	mov	r2, r4
   b56a4:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b56a6:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b56a8:	f7ff fb08 	bl	b4cbc <netdb_getaddrinfo>
   b56ac:	4605      	mov	r5, r0
   b56ae:	2800      	cmp	r0, #0
   b56b0:	d163      	bne.n	b577a <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b56b2:	9b00      	ldr	r3, [sp, #0]
   b56b4:	2b00      	cmp	r3, #0
   b56b6:	d04b      	beq.n	b5750 <_ZN9TCPClient7connectEPKctm+0xc8>
   b56b8:	695b      	ldr	r3, [r3, #20]
   b56ba:	2b00      	cmp	r3, #0
   b56bc:	d048      	beq.n	b5750 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b56be:	a806      	add	r0, sp, #24
   b56c0:	f7ff fcfc 	bl	b50bc <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b56c4:	9b00      	ldr	r3, [sp, #0]
   b56c6:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b56c8:	7863      	ldrb	r3, [r4, #1]
   b56ca:	2b02      	cmp	r3, #2
   b56cc:	d104      	bne.n	b56d8 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b56ce:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b56d0:	a806      	add	r0, sp, #24
   b56d2:	f7ff ffbb 	bl	b564c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b56d6:	e026      	b.n	b5726 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b56d8:	2b0a      	cmp	r3, #10
   b56da:	d124      	bne.n	b5726 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b56dc:	2211      	movs	r2, #17
   b56de:	4629      	mov	r1, r5
   b56e0:	a801      	add	r0, sp, #4
   b56e2:	f000 fd53 	bl	b618c <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b56e6:	68a3      	ldr	r3, [r4, #8]
   b56e8:	2b00      	cmp	r3, #0
   b56ea:	d038      	beq.n	b575e <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b56ec:	f104 0308 	add.w	r3, r4, #8
   b56f0:	f10d 0c04 	add.w	ip, sp, #4
   b56f4:	3418      	adds	r4, #24
   b56f6:	6818      	ldr	r0, [r3, #0]
   b56f8:	6859      	ldr	r1, [r3, #4]
   b56fa:	4662      	mov	r2, ip
   b56fc:	c203      	stmia	r2!, {r0, r1}
   b56fe:	3308      	adds	r3, #8
   b5700:	42a3      	cmp	r3, r4
   b5702:	4694      	mov	ip, r2
   b5704:	d1f7      	bne.n	b56f6 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b5706:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b5708:	a901      	add	r1, sp, #4
   b570a:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b570c:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b5710:	f7ff fce2 	bl	b50d8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5714:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b5718:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b571c:	ac07      	add	r4, sp, #28
   b571e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5720:	f8dc 3000 	ldr.w	r3, [ip]
   b5724:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b5726:	a806      	add	r0, sp, #24
   b5728:	f7ff fce8 	bl	b50fc <_ZNK9IPAddresscvbEv>
        if (addr) {
   b572c:	b180      	cbz	r0, b5750 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b572e:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b5730:	ad07      	add	r5, sp, #28
   b5732:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b5736:	4b12      	ldr	r3, [pc, #72]	; (b5780 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b5738:	930c      	str	r3, [sp, #48]	; 0x30
   b573a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b573c:	ac0d      	add	r4, sp, #52	; 0x34
   b573e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5740:	682b      	ldr	r3, [r5, #0]
   b5742:	7023      	strb	r3, [r4, #0]
   b5744:	463a      	mov	r2, r7
   b5746:	4643      	mov	r3, r8
   b5748:	a90c      	add	r1, sp, #48	; 0x30
   b574a:	4630      	mov	r0, r6
   b574c:	47c8      	blx	r9
   b574e:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b5750:	9800      	ldr	r0, [sp, #0]
   b5752:	f7ff faab 	bl	b4cac <netdb_freeaddrinfo>
}
   b5756:	4628      	mov	r0, r5
   b5758:	b013      	add	sp, #76	; 0x4c
   b575a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b575e:	68e3      	ldr	r3, [r4, #12]
   b5760:	2b00      	cmp	r3, #0
   b5762:	d1c3      	bne.n	b56ec <_ZN9TCPClient7connectEPKctm+0x64>
   b5764:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b5768:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b576c:	f7ff fa8e 	bl	b4c8c <inet_htonl>
   b5770:	4581      	cmp	r9, r0
   b5772:	d1bb      	bne.n	b56ec <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b5774:	f104 0114 	add.w	r1, r4, #20
   b5778:	e7aa      	b.n	b56d0 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b577a:	4625      	mov	r5, r4
   b577c:	e7e8      	b.n	b5750 <_ZN9TCPClient7connectEPKctm+0xc8>
   b577e:	bf00      	nop
   b5780:	000b63d4 	.word	0x000b63d4

000b5784 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b5784:	b538      	push	{r3, r4, r5, lr}
   b5786:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b5788:	681a      	ldr	r2, [r3, #0]
   b578a:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b578c:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b578e:	da10      	bge.n	b57b2 <_ZN9TCPClient9connectedEv+0x2e>
   b5790:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5794:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5798:	429a      	cmp	r2, r3
   b579a:	d10a      	bne.n	b57b2 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b579c:	6803      	ldr	r3, [r0, #0]
   b579e:	691b      	ldr	r3, [r3, #16]
   b57a0:	4798      	blx	r3
        if (!rv) {
   b57a2:	4604      	mov	r4, r0
   b57a4:	b928      	cbnz	r0, b57b2 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b57a6:	682b      	ldr	r3, [r5, #0]
   b57a8:	4628      	mov	r0, r5
   b57aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b57ac:	4798      	blx	r3
        rv = available();
   b57ae:	4620      	mov	r0, r4
}
   b57b0:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b57b2:	2001      	movs	r0, #1
   b57b4:	e7fc      	b.n	b57b0 <_ZN9TCPClient9connectedEv+0x2c>

000b57b6 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b57b6:	b510      	push	{r4, lr}
   b57b8:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b57ba:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b57be:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b57c2:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b57c4:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b57c6:	d005      	beq.n	b57d4 <_ZN9TCPClient4peekEv+0x1e>
   b57c8:	6963      	ldr	r3, [r4, #20]
   b57ca:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b57ce:	4413      	add	r3, r2
   b57d0:	7918      	ldrb	r0, [r3, #4]
}
   b57d2:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b57d4:	6803      	ldr	r3, [r0, #0]
   b57d6:	691b      	ldr	r3, [r3, #16]
   b57d8:	4798      	blx	r3
   b57da:	2800      	cmp	r0, #0
   b57dc:	d1f4      	bne.n	b57c8 <_ZN9TCPClient4peekEv+0x12>
   b57de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b57e2:	e7f6      	b.n	b57d2 <_ZN9TCPClient4peekEv+0x1c>

000b57e4 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b57e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b57e6:	6943      	ldr	r3, [r0, #20]
   b57e8:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b57ea:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b57ee:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b57f2:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b57f4:	4605      	mov	r5, r0
   b57f6:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b57f8:	d016      	beq.n	b5828 <_ZN9TCPClient4readEPhj+0x44>
   b57fa:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b57fc:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b5800:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b5804:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b5806:	42bc      	cmp	r4, r7
   b5808:	bf28      	it	cs
   b580a:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b580c:	3304      	adds	r3, #4
   b580e:	4622      	mov	r2, r4
   b5810:	4419      	add	r1, r3
   b5812:	4630      	mov	r0, r6
   b5814:	f000 fcac 	bl	b6170 <memcpy>
   b5818:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b581a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b581e:	4423      	add	r3, r4
   b5820:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b5824:	4620      	mov	r0, r4
   b5826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b5828:	6803      	ldr	r3, [r0, #0]
   b582a:	691b      	ldr	r3, [r3, #16]
   b582c:	4798      	blx	r3
   b582e:	2800      	cmp	r0, #0
   b5830:	d1e3      	bne.n	b57fa <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b5832:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b5836:	e7f5      	b.n	b5824 <_ZN9TCPClient4readEPhj+0x40>

000b5838 <_ZN9TCPClient12flush_bufferEv>:
   b5838:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b583a:	2300      	movs	r3, #0
   b583c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b5840:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b5842:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b5846:	4770      	bx	lr

000b5848 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b5848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b584c:	461f      	mov	r7, r3
    stop();
   b584e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b5850:	460c      	mov	r4, r1
    stop();
   b5852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b5854:	b08a      	sub	sp, #40	; 0x28
   b5856:	4605      	mov	r5, r0
   b5858:	4616      	mov	r6, r2
    stop();
   b585a:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b585c:	7d23      	ldrb	r3, [r4, #20]
   b585e:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b5862:	2b04      	cmp	r3, #4
   b5864:	bf0c      	ite	eq
   b5866:	2002      	moveq	r0, #2
   b5868:	200a      	movne	r0, #10
   b586a:	2206      	movs	r2, #6
   b586c:	2101      	movs	r1, #1
   b586e:	f7ff fa55 	bl	b4d1c <sock_socket>
   b5872:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b5876:	696b      	ldr	r3, [r5, #20]
   b5878:	681b      	ldr	r3, [r3, #0]
   b587a:	2b00      	cmp	r3, #0
   b587c:	da08      	bge.n	b5890 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b587e:	682b      	ldr	r3, [r5, #0]
   b5880:	4628      	mov	r0, r5
   b5882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5884:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b5886:	4798      	blx	r3
}
   b5888:	4620      	mov	r0, r4
   b588a:	b00a      	add	sp, #40	; 0x28
   b588c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b5890:	4628      	mov	r0, r5
   b5892:	f7ff ffd1 	bl	b5838 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b5896:	b1b7      	cbz	r7, b58c6 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b5898:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b589a:	a903      	add	r1, sp, #12
   b589c:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b589e:	9303      	str	r3, [sp, #12]
   b58a0:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b58a4:	f7ff f9e2 	bl	b4c6c <if_index_to_name>
   b58a8:	2800      	cmp	r0, #0
   b58aa:	d1e8      	bne.n	b587e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b58ac:	6968      	ldr	r0, [r5, #20]
   b58ae:	2306      	movs	r3, #6
   b58b0:	9300      	str	r3, [sp, #0]
   b58b2:	6800      	ldr	r0, [r0, #0]
   b58b4:	ab03      	add	r3, sp, #12
   b58b6:	f241 020b 	movw	r2, #4107	; 0x100b
   b58ba:	f640 71ff 	movw	r1, #4095	; 0xfff
   b58be:	f7ff fa05 	bl	b4ccc <sock_setsockopt>
   b58c2:	2800      	cmp	r0, #0
   b58c4:	d1db      	bne.n	b587e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b58c6:	221c      	movs	r2, #28
   b58c8:	2100      	movs	r1, #0
   b58ca:	a803      	add	r0, sp, #12
   b58cc:	f000 fc5e 	bl	b618c <memset>
    if (ip.version() == 4) {
   b58d0:	7d23      	ldrb	r3, [r4, #20]
   b58d2:	2b04      	cmp	r3, #4
   b58d4:	d11d      	bne.n	b5912 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b58d6:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b58da:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b58dc:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b58e0:	f7ff f9dc 	bl	b4c9c <inet_htons>
   b58e4:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b58e8:	6860      	ldr	r0, [r4, #4]
   b58ea:	f7ff f9cf 	bl	b4c8c <inet_htonl>
   b58ee:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b58f0:	696b      	ldr	r3, [r5, #20]
   b58f2:	221c      	movs	r2, #28
   b58f4:	6818      	ldr	r0, [r3, #0]
   b58f6:	a903      	add	r1, sp, #12
   b58f8:	f7ff f9f8 	bl	b4cec <sock_connect>
   b58fc:	2800      	cmp	r0, #0
   b58fe:	d1be      	bne.n	b587e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b5900:	3404      	adds	r4, #4
   b5902:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5904:	696d      	ldr	r5, [r5, #20]
   b5906:	358c      	adds	r5, #140	; 0x8c
   b5908:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b590a:	6823      	ldr	r3, [r4, #0]
   b590c:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b590e:	2401      	movs	r4, #1
   b5910:	e7ba      	b.n	b5888 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b5912:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b5916:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b5918:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b591c:	f7ff f9be 	bl	b4c9c <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b5920:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b5922:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b5926:	1d23      	adds	r3, r4, #4
   b5928:	f104 0714 	add.w	r7, r4, #20
   b592c:	6818      	ldr	r0, [r3, #0]
   b592e:	6859      	ldr	r1, [r3, #4]
   b5930:	4632      	mov	r2, r6
   b5932:	c203      	stmia	r2!, {r0, r1}
   b5934:	3308      	adds	r3, #8
   b5936:	42bb      	cmp	r3, r7
   b5938:	4616      	mov	r6, r2
   b593a:	d1f7      	bne.n	b592c <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b593c:	e7d8      	b.n	b58f0 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b5940 <_ZN9TCPClient9availableEv>:
{
   b5940:	b530      	push	{r4, r5, lr}
   b5942:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b5944:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b5948:	b08b      	sub	sp, #44	; 0x2c
   b594a:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b594c:	b12b      	cbz	r3, b595a <_ZN9TCPClient9availableEv+0x1a>
   b594e:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b5952:	429a      	cmp	r2, r3
   b5954:	d101      	bne.n	b595a <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b5956:	f7ff ff6f 	bl	b5838 <_ZN9TCPClient12flush_bufferEv>
   b595a:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b595c:	6808      	ldr	r0, [r1, #0]
   b595e:	2800      	cmp	r0, #0
   b5960:	db18      	blt.n	b5994 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b5962:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b5966:	2d7f      	cmp	r5, #127	; 0x7f
   b5968:	d814      	bhi.n	b5994 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b596a:	3104      	adds	r1, #4
   b596c:	2308      	movs	r3, #8
   b596e:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b5972:	4429      	add	r1, r5
   b5974:	f7ff f9c2 	bl	b4cfc <sock_recv>
            if (ret > 0) {
   b5978:	2800      	cmp	r0, #0
   b597a:	dd13      	ble.n	b59a4 <_ZN9TCPClient9availableEv+0x64>
   b597c:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b597e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5982:	b90a      	cbnz	r2, b5988 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b5984:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b5988:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b598a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b598e:	4410      	add	r0, r2
   b5990:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b5994:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b5996:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b599a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b599e:	1ac0      	subs	r0, r0, r3
   b59a0:	b00b      	add	sp, #44	; 0x2c
   b59a2:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b59a4:	f7ff faee 	bl	b4f84 <__errno>
   b59a8:	6803      	ldr	r3, [r0, #0]
   b59aa:	2b0b      	cmp	r3, #11
   b59ac:	d0f2      	beq.n	b5994 <_ZN9TCPClient9availableEv+0x54>
   b59ae:	f7ff fae9 	bl	b4f84 <__errno>
   b59b2:	6803      	ldr	r3, [r0, #0]
   b59b4:	2b0b      	cmp	r3, #11
   b59b6:	d0ed      	beq.n	b5994 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b59b8:	2320      	movs	r3, #32
   b59ba:	2500      	movs	r5, #0
   b59bc:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b59c0:	f7ff fae0 	bl	b4f84 <__errno>
   b59c4:	6803      	ldr	r3, [r0, #0]
   b59c6:	9301      	str	r3, [sp, #4]
   b59c8:	4b08      	ldr	r3, [pc, #32]	; (b59ec <_ZN9TCPClient9availableEv+0xac>)
   b59ca:	4909      	ldr	r1, [pc, #36]	; (b59f0 <_ZN9TCPClient9availableEv+0xb0>)
   b59cc:	9300      	str	r3, [sp, #0]
   b59ce:	aa02      	add	r2, sp, #8
   b59d0:	462b      	mov	r3, r5
   b59d2:	2032      	movs	r0, #50	; 0x32
   b59d4:	f7ff fa1a 	bl	b4e0c <log_message>
                    sock_close(d_->sock);
   b59d8:	6963      	ldr	r3, [r4, #20]
   b59da:	6818      	ldr	r0, [r3, #0]
   b59dc:	f7ff f97e 	bl	b4cdc <sock_close>
   b59e0:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b59e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b59e6:	601a      	str	r2, [r3, #0]
   b59e8:	e7d4      	b.n	b5994 <_ZN9TCPClient9availableEv+0x54>
   b59ea:	bf00      	nop
   b59ec:	000b6427 	.word	0x000b6427
   b59f0:	000b6420 	.word	0x000b6420

000b59f4 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b59f4:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b59f6:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b59f8:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b59fa:	6818      	ldr	r0, [r3, #0]
   b59fc:	2800      	cmp	r0, #0
   b59fe:	db01      	blt.n	b5a04 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b5a00:	f7ff f96c 	bl	b4cdc <sock_close>
   b5a04:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b5a06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b5a0a:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b5a0c:	6960      	ldr	r0, [r4, #20]
   b5a0e:	2211      	movs	r2, #17
   b5a10:	2100      	movs	r1, #0
   b5a12:	308c      	adds	r0, #140	; 0x8c
   b5a14:	f000 fbba 	bl	b618c <memset>
    flush_buffer();
   b5a18:	4620      	mov	r0, r4
}
   b5a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b5a1e:	f7ff bf0b 	b.w	b5838 <_ZN9TCPClient12flush_bufferEv>

000b5a22 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b5a22:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b5a24:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b5a26:	4604      	mov	r4, r0
          total(0) {
   b5a28:	6001      	str	r1, [r0, #0]
   b5a2a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b5a2e:	3088      	adds	r0, #136	; 0x88
   b5a30:	f7ff fb44 	bl	b50bc <_ZN9IPAddressC1Ev>
}
   b5a34:	4620      	mov	r0, r4
   b5a36:	bd10      	pop	{r4, pc}

000b5a38 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b5a38:	b573      	push	{r0, r1, r4, r5, r6, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5a3a:	2300      	movs	r3, #0
   b5a3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5a40:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b5a44:	4a0e      	ldr	r2, [pc, #56]	; (b5a80 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b5a46:	6103      	str	r3, [r0, #16]
   b5a48:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b5a4a:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b5a4c:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5a4e:	20ac      	movs	r0, #172	; 0xac
   b5a50:	9101      	str	r1, [sp, #4]
   b5a52:	f7fe fb30 	bl	b40b6 <_Znwj>
	  auto __pi = ::new (__mem)
   b5a56:	1e05      	subs	r5, r0, #0
   b5a58:	f105 060c 	add.w	r6, r5, #12
   b5a5c:	d008      	beq.n	b5a70 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b5a5e:	2301      	movs	r3, #1
   b5a60:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b5a64:	4b07      	ldr	r3, [pc, #28]	; (b5a84 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5a66:	9901      	ldr	r1, [sp, #4]
   b5a68:	602b      	str	r3, [r5, #0]
   b5a6a:	4630      	mov	r0, r6
   b5a6c:	f7ff ffd9 	bl	b5a22 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b5a70:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b5a72:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b5a76:	f7ff fedf 	bl	b5838 <_ZN9TCPClient12flush_bufferEv>
}
   b5a7a:	b002      	add	sp, #8
   b5a7c:	bd70      	pop	{r4, r5, r6, pc}
   b5a7e:	bf00      	nop
   b5a80:	000b645c 	.word	0x000b645c
   b5a84:	000b6440 	.word	0x000b6440

000b5a88 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b5a88:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b5a8a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b5a8e:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b5a90:	f7ff ffd2 	bl	b5a38 <_ZN9TCPClientC1Ei>
}
   b5a94:	4620      	mov	r0, r4
   b5a96:	bd10      	pop	{r4, pc}

000b5a98 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b5a98:	b510      	push	{r4, lr}
   b5a9a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b5a9c:	6800      	ldr	r0, [r0, #0]
   b5a9e:	2800      	cmp	r0, #0
   b5aa0:	db01      	blt.n	b5aa6 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b5aa2:	f7ff f91b 	bl	b4cdc <sock_close>
    }
}
   b5aa6:	4620      	mov	r0, r4
   b5aa8:	bd10      	pop	{r4, pc}

000b5aaa <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b5aaa:	300c      	adds	r0, #12
   b5aac:	f7ff bff4 	b.w	b5a98 <_ZN9TCPClient4DataD1Ev>

000b5ab0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5ab0:	4b02      	ldr	r3, [pc, #8]	; (b5abc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5ab2:	681a      	ldr	r2, [r3, #0]
   b5ab4:	4b02      	ldr	r3, [pc, #8]	; (b5ac0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5ab6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5ab8:	4770      	bx	lr
   b5aba:	bf00      	nop
   b5abc:	2003e588 	.word	0x2003e588
   b5ac0:	2003e714 	.word	0x2003e714

000b5ac4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5ac4:	4770      	bx	lr

000b5ac6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5ac6:	7441      	strb	r1, [r0, #17]
}
   b5ac8:	4770      	bx	lr

000b5aca <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5aca:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5acc:	7c00      	ldrb	r0, [r0, #16]
   b5ace:	f7ff f955 	bl	b4d7c <hal_usart_available_data_for_write>
}
   b5ad2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5ad6:	bd08      	pop	{r3, pc}

000b5ad8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5ad8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5ada:	7c00      	ldrb	r0, [r0, #16]
   b5adc:	f7ff f92e 	bl	b4d3c <hal_usart_available>
}
   b5ae0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5ae4:	bd08      	pop	{r3, pc}

000b5ae6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5ae6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5ae8:	7c00      	ldrb	r0, [r0, #16]
   b5aea:	f7ff f937 	bl	b4d5c <hal_usart_peek>
}
   b5aee:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5af2:	bd08      	pop	{r3, pc}

000b5af4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5af4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5af6:	7c00      	ldrb	r0, [r0, #16]
   b5af8:	f7ff f928 	bl	b4d4c <hal_usart_read>
}
   b5afc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5b00:	bd08      	pop	{r3, pc}

000b5b02 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5b02:	7c00      	ldrb	r0, [r0, #16]
   b5b04:	f7ff b932 	b.w	b4d6c <hal_usart_flush>

000b5b08 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5b08:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5b0a:	7c45      	ldrb	r5, [r0, #17]
{
   b5b0c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5b0e:	b12d      	cbz	r5, b5b1c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5b10:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5b12:	b003      	add	sp, #12
   b5b14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5b18:	f7ff b908 	b.w	b4d2c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5b1c:	7c00      	ldrb	r0, [r0, #16]
   b5b1e:	9101      	str	r1, [sp, #4]
   b5b20:	f7ff f92c 	bl	b4d7c <hal_usart_available_data_for_write>
   b5b24:	2800      	cmp	r0, #0
   b5b26:	9901      	ldr	r1, [sp, #4]
   b5b28:	dcf2      	bgt.n	b5b10 <_ZN11USARTSerial5writeEh+0x8>
}
   b5b2a:	4628      	mov	r0, r5
   b5b2c:	b003      	add	sp, #12
   b5b2e:	bd30      	pop	{r4, r5, pc}

000b5b30 <_ZN11USARTSerialD0Ev>:
   b5b30:	b510      	push	{r4, lr}
   b5b32:	2114      	movs	r1, #20
   b5b34:	4604      	mov	r4, r0
   b5b36:	f7fe fac4 	bl	b40c2 <_ZdlPvj>
   b5b3a:	4620      	mov	r0, r4
   b5b3c:	bd10      	pop	{r4, pc}
	...

000b5b40 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b5b40:	b510      	push	{r4, lr}
   b5b42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5b46:	4604      	mov	r4, r0
   b5b48:	4608      	mov	r0, r1
   b5b4a:	4611      	mov	r1, r2
   b5b4c:	2200      	movs	r2, #0
   b5b4e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5b52:	4b04      	ldr	r3, [pc, #16]	; (b5b64 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5b54:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5b56:	2301      	movs	r3, #1
  _serial = serial;
   b5b58:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5b5a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5b5c:	f7ff f916 	bl	b4d8c <hal_usart_init_ex>
}
   b5b60:	4620      	mov	r0, r4
   b5b62:	bd10      	pop	{r4, pc}
   b5b64:	000b64c4 	.word	0x000b64c4

000b5b68 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5b68:	7441      	strb	r1, [r0, #17]
}
   b5b6a:	4770      	bx	lr

000b5b6c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5b6c:	4770      	bx	lr

000b5b6e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b5b6e:	4770      	bx	lr

000b5b70 <_ZN9USBSerial4readEv>:
{
   b5b70:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b5b72:	2100      	movs	r1, #0
   b5b74:	7c00      	ldrb	r0, [r0, #16]
   b5b76:	f7ff f931 	bl	b4ddc <HAL_USB_USART_Receive_Data>
}
   b5b7a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5b7e:	bd08      	pop	{r3, pc}

000b5b80 <_ZN9USBSerial4peekEv>:
{
   b5b80:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b5b82:	2101      	movs	r1, #1
   b5b84:	7c00      	ldrb	r0, [r0, #16]
   b5b86:	f7ff f929 	bl	b4ddc <HAL_USB_USART_Receive_Data>
}
   b5b8a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5b8e:	bd08      	pop	{r3, pc}

000b5b90 <_ZN9USBSerial17availableForWriteEv>:
{
   b5b90:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5b92:	7c00      	ldrb	r0, [r0, #16]
   b5b94:	f7ff f91a 	bl	b4dcc <HAL_USB_USART_Available_Data_For_Write>
}
   b5b98:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5b9c:	bd08      	pop	{r3, pc}

000b5b9e <_ZN9USBSerial9availableEv>:
{
   b5b9e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5ba0:	7c00      	ldrb	r0, [r0, #16]
   b5ba2:	f7ff f90b 	bl	b4dbc <HAL_USB_USART_Available_Data>
}
   b5ba6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5baa:	bd08      	pop	{r3, pc}

000b5bac <_ZN9USBSerial5writeEh>:
{
   b5bac:	b513      	push	{r0, r1, r4, lr}
   b5bae:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5bb0:	7c00      	ldrb	r0, [r0, #16]
{
   b5bb2:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5bb4:	f7ff f90a 	bl	b4dcc <HAL_USB_USART_Available_Data_For_Write>
   b5bb8:	2800      	cmp	r0, #0
   b5bba:	9901      	ldr	r1, [sp, #4]
   b5bbc:	dc01      	bgt.n	b5bc2 <_ZN9USBSerial5writeEh+0x16>
   b5bbe:	7c60      	ldrb	r0, [r4, #17]
   b5bc0:	b120      	cbz	r0, b5bcc <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5bc2:	7c20      	ldrb	r0, [r4, #16]
   b5bc4:	f7ff f912 	bl	b4dec <HAL_USB_USART_Send_Data>
   b5bc8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5bcc:	b002      	add	sp, #8
   b5bce:	bd10      	pop	{r4, pc}

000b5bd0 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5bd0:	7c00      	ldrb	r0, [r0, #16]
   b5bd2:	f7ff b913 	b.w	b4dfc <HAL_USB_USART_Flush_Data>

000b5bd6 <_ZN9USBSerialD0Ev>:
   b5bd6:	b510      	push	{r4, lr}
   b5bd8:	2114      	movs	r1, #20
   b5bda:	4604      	mov	r4, r0
   b5bdc:	f7fe fa71 	bl	b40c2 <_ZdlPvj>
   b5be0:	4620      	mov	r0, r4
   b5be2:	bd10      	pop	{r4, pc}

000b5be4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5be4:	b510      	push	{r4, lr}
   b5be6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5bea:	4604      	mov	r4, r0
   b5bec:	4608      	mov	r0, r1
   b5bee:	2100      	movs	r1, #0
   b5bf0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5bf4:	4b04      	ldr	r3, [pc, #16]	; (b5c08 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5bf6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5bf8:	2301      	movs	r3, #1
  _serial = serial;
   b5bfa:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5bfc:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b5bfe:	4611      	mov	r1, r2
   b5c00:	f7ff f8cc 	bl	b4d9c <HAL_USB_USART_Init>
}
   b5c04:	4620      	mov	r0, r4
   b5c06:	bd10      	pop	{r4, pc}
   b5c08:	000b64f4 	.word	0x000b64f4

000b5c0c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b5c0c:	7c00      	ldrb	r0, [r0, #16]
   b5c0e:	2200      	movs	r2, #0
   b5c10:	f7ff b8cc 	b.w	b4dac <HAL_USB_USART_Begin>

000b5c14 <_Z19acquireSerialBufferv>:
{
   b5c14:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b5c16:	2214      	movs	r2, #20
{
   b5c18:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b5c1a:	2100      	movs	r1, #0
   b5c1c:	f000 fab6 	bl	b618c <memset>
}
   b5c20:	4620      	mov	r0, r4
   b5c22:	bd10      	pop	{r4, pc}

000b5c24 <_Z16_fetch_usbserialv>:
{
   b5c24:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5c26:	4c0f      	ldr	r4, [pc, #60]	; (b5c64 <_Z16_fetch_usbserialv+0x40>)
{
   b5c28:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b5c2a:	a803      	add	r0, sp, #12
   b5c2c:	f7ff fff2 	bl	b5c14 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5c30:	7821      	ldrb	r1, [r4, #0]
   b5c32:	f3bf 8f5b 	dmb	ish
   b5c36:	f011 0101 	ands.w	r1, r1, #1
   b5c3a:	d10f      	bne.n	b5c5c <_Z16_fetch_usbserialv+0x38>
   b5c3c:	4620      	mov	r0, r4
   b5c3e:	9101      	str	r1, [sp, #4]
   b5c40:	f7fe fa41 	bl	b40c6 <__cxa_guard_acquire>
   b5c44:	9901      	ldr	r1, [sp, #4]
   b5c46:	b148      	cbz	r0, b5c5c <_Z16_fetch_usbserialv+0x38>
   b5c48:	aa03      	add	r2, sp, #12
   b5c4a:	4807      	ldr	r0, [pc, #28]	; (b5c68 <_Z16_fetch_usbserialv+0x44>)
   b5c4c:	f7ff ffca 	bl	b5be4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5c50:	4620      	mov	r0, r4
   b5c52:	f7fe fa3d 	bl	b40d0 <__cxa_guard_release>
   b5c56:	4805      	ldr	r0, [pc, #20]	; (b5c6c <_Z16_fetch_usbserialv+0x48>)
   b5c58:	f000 fa84 	bl	b6164 <atexit>
	return _usbserial;
}
   b5c5c:	4802      	ldr	r0, [pc, #8]	; (b5c68 <_Z16_fetch_usbserialv+0x44>)
   b5c5e:	b008      	add	sp, #32
   b5c60:	bd10      	pop	{r4, pc}
   b5c62:	bf00      	nop
   b5c64:	2003e718 	.word	0x2003e718
   b5c68:	2003e71c 	.word	0x2003e71c
   b5c6c:	000b5b6d 	.word	0x000b5b6d

000b5c70 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b5c70:	2200      	movs	r2, #0
   b5c72:	6840      	ldr	r0, [r0, #4]
   b5c74:	4611      	mov	r1, r2
   b5c76:	f7ff b925 	b.w	b4ec4 <network_ready>

000b5c7a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5c7a:	2200      	movs	r2, #0
   b5c7c:	6840      	ldr	r0, [r0, #4]
   b5c7e:	4611      	mov	r1, r2
   b5c80:	f7ff b940 	b.w	b4f04 <network_listening>

000b5c84 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5c84:	2200      	movs	r2, #0
   b5c86:	6840      	ldr	r0, [r0, #4]
   b5c88:	4611      	mov	r1, r2
   b5c8a:	f7ff b94b 	b.w	b4f24 <network_get_listen_timeout>

000b5c8e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5c8e:	6840      	ldr	r0, [r0, #4]
   b5c90:	2200      	movs	r2, #0
   b5c92:	f7ff b93f 	b.w	b4f14 <network_set_listen_timeout>

000b5c96 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5c96:	6840      	ldr	r0, [r0, #4]
   b5c98:	2200      	movs	r2, #0
   b5c9a:	f081 0101 	eor.w	r1, r1, #1
   b5c9e:	f7ff b929 	b.w	b4ef4 <network_listen>

000b5ca2 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5ca2:	2300      	movs	r3, #0
   b5ca4:	6840      	ldr	r0, [r0, #4]
   b5ca6:	461a      	mov	r2, r3
   b5ca8:	4619      	mov	r1, r3
   b5caa:	f7ff b91b 	b.w	b4ee4 <network_off>

000b5cae <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5cae:	2300      	movs	r3, #0
   b5cb0:	6840      	ldr	r0, [r0, #4]
   b5cb2:	461a      	mov	r2, r3
   b5cb4:	4619      	mov	r1, r3
   b5cb6:	f7ff b90d 	b.w	b4ed4 <network_on>

000b5cba <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5cba:	2200      	movs	r2, #0
   b5cbc:	6840      	ldr	r0, [r0, #4]
   b5cbe:	4611      	mov	r1, r2
   b5cc0:	f7ff b8f0 	b.w	b4ea4 <network_connecting>

000b5cc4 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5cc4:	6840      	ldr	r0, [r0, #4]
   b5cc6:	2200      	movs	r2, #0
   b5cc8:	2102      	movs	r1, #2
   b5cca:	f7ff b8f3 	b.w	b4eb4 <network_disconnect>

000b5cce <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5cce:	2300      	movs	r3, #0
   b5cd0:	6840      	ldr	r0, [r0, #4]
   b5cd2:	461a      	mov	r2, r3
   b5cd4:	f7ff b8de 	b.w	b4e94 <network_connect>

000b5cd8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b5cd8:	4b02      	ldr	r3, [pc, #8]	; (b5ce4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b5cda:	2204      	movs	r2, #4
   b5cdc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b5cde:	4a02      	ldr	r2, [pc, #8]	; (b5ce8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b5ce0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b5ce2:	4770      	bx	lr
   b5ce4:	2003e730 	.word	0x2003e730
   b5ce8:	000b6524 	.word	0x000b6524

000b5cec <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b5cec:	b510      	push	{r4, lr}
   b5cee:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b5cf0:	f7fe f99e 	bl	b4030 <strlen>
   b5cf4:	3801      	subs	r0, #1
   b5cf6:	1823      	adds	r3, r4, r0
   b5cf8:	4620      	mov	r0, r4
	while(i<j){
   b5cfa:	4283      	cmp	r3, r0
   b5cfc:	d906      	bls.n	b5d0c <_Z11str_reversePc+0x20>
		c = *i;
   b5cfe:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b5d00:	7819      	ldrb	r1, [r3, #0]
   b5d02:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b5d06:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b5d0a:	e7f6      	b.n	b5cfa <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b5d0c:	bd10      	pop	{r4, pc}

000b5d0e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b5d0e:	b570      	push	{r4, r5, r6, lr}
   b5d10:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b5d12:	1e91      	subs	r1, r2, #2
   b5d14:	2922      	cmp	r1, #34	; 0x22
   b5d16:	d81d      	bhi.n	b5d54 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b5d18:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b5d1a:	b930      	cbnz	r0, b5d2a <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b5d1c:	4423      	add	r3, r4
            *ptr++ = '0';
   b5d1e:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b5d20:	429d      	cmp	r5, r3
   b5d22:	d210      	bcs.n	b5d46 <ultoa+0x38>
            *ptr++ = '0';
   b5d24:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b5d28:	e7fa      	b.n	b5d20 <ultoa+0x12>
            result.quot = a/radix;
   b5d2a:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b5d2e:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b5d32:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b5d34:	2809      	cmp	r0, #9
                *ptr += '0';
   b5d36:	bf94      	ite	ls
   b5d38:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b5d3a:	3157      	addhi	r1, #87	; 0x57
   b5d3c:	b2c9      	uxtb	r1, r1
   b5d3e:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b5d42:	4630      	mov	r0, r6
	while(a){
   b5d44:	e7e9      	b.n	b5d1a <ultoa+0xc>

	*ptr = '\0';
   b5d46:	2300      	movs	r3, #0
	str_reverse(buffer);
   b5d48:	4620      	mov	r0, r4
	*ptr = '\0';
   b5d4a:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b5d4c:	f7ff ffce 	bl	b5cec <_Z11str_reversePc>
	return buffer;
   b5d50:	4620      	mov	r0, r4
}
   b5d52:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b5d54:	2000      	movs	r0, #0
   b5d56:	e7fc      	b.n	b5d52 <ultoa+0x44>

000b5d58 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b5d58:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b5d5a:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b5d5c:	460c      	mov	r4, r1
   b5d5e:	4615      	mov	r5, r2
	if(a<0){
   b5d60:	da0e      	bge.n	b5d80 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b5d62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b5d66:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b5d6a:	bf14      	ite	ne
   b5d6c:	4258      	negne	r0, r3
   b5d6e:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b5d70:	2301      	movs	r3, #1
		*buffer = '-';
   b5d72:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b5d74:	462a      	mov	r2, r5
   b5d76:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b5d78:	f7ff ffc9 	bl	b5d0e <ultoa>
	}
	return buffer;
}
   b5d7c:	4620      	mov	r0, r4
   b5d7e:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b5d80:	2301      	movs	r3, #1
   b5d82:	e7f9      	b.n	b5d78 <itoa+0x20>

000b5d84 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5d84:	4b01      	ldr	r3, [pc, #4]	; (b5d8c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b5d86:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5d88:	4770      	bx	lr
   b5d8a:	bf00      	nop
   b5d8c:	2003e58c 	.word	0x2003e58c

000b5d90 <serialEventRun>:
{
   b5d90:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5d92:	4b0b      	ldr	r3, [pc, #44]	; (b5dc0 <serialEventRun+0x30>)
   b5d94:	b143      	cbz	r3, b5da8 <serialEventRun+0x18>
   b5d96:	f7ff ff45 	bl	b5c24 <_Z16_fetch_usbserialv>
   b5d9a:	6803      	ldr	r3, [r0, #0]
   b5d9c:	691b      	ldr	r3, [r3, #16]
   b5d9e:	4798      	blx	r3
   b5da0:	2800      	cmp	r0, #0
   b5da2:	dd01      	ble.n	b5da8 <serialEventRun+0x18>
        serialEvent();
   b5da4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5da8:	4b06      	ldr	r3, [pc, #24]	; (b5dc4 <serialEventRun+0x34>)
   b5daa:	b143      	cbz	r3, b5dbe <serialEventRun+0x2e>
   b5dac:	f000 f8a2 	bl	b5ef4 <_Z22__fetch_global_Serial1v>
   b5db0:	6803      	ldr	r3, [r0, #0]
   b5db2:	691b      	ldr	r3, [r3, #16]
   b5db4:	4798      	blx	r3
   b5db6:	2800      	cmp	r0, #0
   b5db8:	dd01      	ble.n	b5dbe <serialEventRun+0x2e>
        serialEvent1();
   b5dba:	f3af 8000 	nop.w
}
   b5dbe:	bd08      	pop	{r3, pc}
	...

000b5dc8 <_post_loop>:
{
   b5dc8:	b508      	push	{r3, lr}
	serialEventRun();
   b5dca:	f7ff ffe1 	bl	b5d90 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5dce:	f7fe ff45 	bl	b4c5c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5dd2:	4b01      	ldr	r3, [pc, #4]	; (b5dd8 <_post_loop+0x10>)
   b5dd4:	6018      	str	r0, [r3, #0]
}
   b5dd6:	bd08      	pop	{r3, pc}
   b5dd8:	2003e740 	.word	0x2003e740

000b5ddc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5ddc:	4805      	ldr	r0, [pc, #20]	; (b5df4 <_Z33system_initialize_user_backup_ramv+0x18>)
   b5dde:	4a06      	ldr	r2, [pc, #24]	; (b5df8 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5de0:	4906      	ldr	r1, [pc, #24]	; (b5dfc <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5de2:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5de4:	1a12      	subs	r2, r2, r0
   b5de6:	f000 f9c3 	bl	b6170 <memcpy>
    __backup_sram_signature = signature;
   b5dea:	4b05      	ldr	r3, [pc, #20]	; (b5e00 <_Z33system_initialize_user_backup_ramv+0x24>)
   b5dec:	4a05      	ldr	r2, [pc, #20]	; (b5e04 <_Z33system_initialize_user_backup_ramv+0x28>)
   b5dee:	601a      	str	r2, [r3, #0]
}
   b5df0:	bd08      	pop	{r3, pc}
   b5df2:	bf00      	nop
   b5df4:	2003f400 	.word	0x2003f400
   b5df8:	2003f404 	.word	0x2003f404
   b5dfc:	000b6804 	.word	0x000b6804
   b5e00:	2003f400 	.word	0x2003f400
   b5e04:	9a271c1e 	.word	0x9a271c1e

000b5e08 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5e08:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5e0a:	2300      	movs	r3, #0
   b5e0c:	9300      	str	r3, [sp, #0]
   b5e0e:	461a      	mov	r2, r3
   b5e10:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5e14:	f7ff f824 	bl	b4e60 <system_ctrl_set_result>
}
   b5e18:	b003      	add	sp, #12
   b5e1a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5e20 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5e20:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b5e22:	8843      	ldrh	r3, [r0, #2]
   b5e24:	2b0a      	cmp	r3, #10
   b5e26:	d008      	beq.n	b5e3a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5e28:	2b50      	cmp	r3, #80	; 0x50
   b5e2a:	d10b      	bne.n	b5e44 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5e2c:	4b09      	ldr	r3, [pc, #36]	; (b5e54 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5e2e:	681b      	ldr	r3, [r3, #0]
   b5e30:	b14b      	cbz	r3, b5e46 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b5e32:	b003      	add	sp, #12
   b5e34:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5e38:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b5e3a:	f7ff ffe5 	bl	b5e08 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5e3e:	b003      	add	sp, #12
   b5e40:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5e44:	2300      	movs	r3, #0
   b5e46:	9300      	str	r3, [sp, #0]
   b5e48:	461a      	mov	r2, r3
   b5e4a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5e4e:	f7ff f807 	bl	b4e60 <system_ctrl_set_result>
}
   b5e52:	e7f4      	b.n	b5e3e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5e54:	2003e73c 	.word	0x2003e73c

000b5e58 <module_user_init_hook>:
{
   b5e58:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b5e5a:	4812      	ldr	r0, [pc, #72]	; (b5ea4 <module_user_init_hook+0x4c>)
   b5e5c:	2100      	movs	r1, #0
   b5e5e:	f7ff f8a1 	bl	b4fa4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b5e62:	4b11      	ldr	r3, [pc, #68]	; (b5ea8 <module_user_init_hook+0x50>)
   b5e64:	681a      	ldr	r2, [r3, #0]
   b5e66:	4b11      	ldr	r3, [pc, #68]	; (b5eac <module_user_init_hook+0x54>)
   b5e68:	429a      	cmp	r2, r3
   b5e6a:	4b11      	ldr	r3, [pc, #68]	; (b5eb0 <module_user_init_hook+0x58>)
   b5e6c:	bf0c      	ite	eq
   b5e6e:	2201      	moveq	r2, #1
   b5e70:	2200      	movne	r2, #0
   b5e72:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5e74:	d001      	beq.n	b5e7a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b5e76:	f7ff ffb1 	bl	b5ddc <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b5e7a:	f7fe fee7 	bl	b4c4c <HAL_RNG_GetRandomNumber>
   b5e7e:	4604      	mov	r4, r0
    srand(seed);
   b5e80:	f000 f98c 	bl	b619c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5e84:	4b0b      	ldr	r3, [pc, #44]	; (b5eb4 <module_user_init_hook+0x5c>)
   b5e86:	b113      	cbz	r3, b5e8e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5e88:	4620      	mov	r0, r4
   b5e8a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b5e8e:	2100      	movs	r1, #0
   b5e90:	4808      	ldr	r0, [pc, #32]	; (b5eb4 <module_user_init_hook+0x5c>)
   b5e92:	f7fe fff7 	bl	b4e84 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b5e96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b5e9a:	4807      	ldr	r0, [pc, #28]	; (b5eb8 <module_user_init_hook+0x60>)
   b5e9c:	2100      	movs	r1, #0
   b5e9e:	f7fe bfd5 	b.w	b4e4c <system_ctrl_set_app_request_handler>
   b5ea2:	bf00      	nop
   b5ea4:	000b5d85 	.word	0x000b5d85
   b5ea8:	2003f400 	.word	0x2003f400
   b5eac:	9a271c1e 	.word	0x9a271c1e
   b5eb0:	2003e738 	.word	0x2003e738
   b5eb4:	00000000 	.word	0x00000000
   b5eb8:	000b5e21 	.word	0x000b5e21

000b5ebc <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5ebc:	4770      	bx	lr
	...

000b5ec0 <_Z20acquireSerial1Bufferv>:
{
   b5ec0:	b538      	push	{r3, r4, r5, lr}
   b5ec2:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b5ec4:	2514      	movs	r5, #20
   b5ec6:	462a      	mov	r2, r5
   b5ec8:	2100      	movs	r1, #0
   b5eca:	f000 f95f 	bl	b618c <memset>
   b5ece:	8025      	strh	r5, [r4, #0]
   b5ed0:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5ed2:	4907      	ldr	r1, [pc, #28]	; (b5ef0 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b5ed4:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5ed6:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b5ed8:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5eda:	f000 f82f 	bl	b5f3c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5ede:	4904      	ldr	r1, [pc, #16]	; (b5ef0 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b5ee0:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5ee2:	4628      	mov	r0, r5
   b5ee4:	f000 f82a 	bl	b5f3c <_ZnajRKSt9nothrow_t>
    };
   b5ee8:	60e0      	str	r0, [r4, #12]
}
   b5eea:	4620      	mov	r0, r4
   b5eec:	bd38      	pop	{r3, r4, r5, pc}
   b5eee:	bf00      	nop
   b5ef0:	000b6558 	.word	0x000b6558

000b5ef4 <_Z22__fetch_global_Serial1v>:
{
   b5ef4:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5ef6:	4d0e      	ldr	r5, [pc, #56]	; (b5f30 <_Z22__fetch_global_Serial1v+0x3c>)
   b5ef8:	7829      	ldrb	r1, [r5, #0]
   b5efa:	f3bf 8f5b 	dmb	ish
   b5efe:	f011 0401 	ands.w	r4, r1, #1
{
   b5f02:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5f04:	d111      	bne.n	b5f2a <_Z22__fetch_global_Serial1v+0x36>
   b5f06:	4628      	mov	r0, r5
   b5f08:	f7fe f8dd 	bl	b40c6 <__cxa_guard_acquire>
   b5f0c:	b168      	cbz	r0, b5f2a <_Z22__fetch_global_Serial1v+0x36>
   b5f0e:	a801      	add	r0, sp, #4
   b5f10:	f7ff ffd6 	bl	b5ec0 <_Z20acquireSerial1Bufferv>
   b5f14:	aa01      	add	r2, sp, #4
   b5f16:	4621      	mov	r1, r4
   b5f18:	4806      	ldr	r0, [pc, #24]	; (b5f34 <_Z22__fetch_global_Serial1v+0x40>)
   b5f1a:	f7ff fe11 	bl	b5b40 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b5f1e:	4628      	mov	r0, r5
   b5f20:	f7fe f8d6 	bl	b40d0 <__cxa_guard_release>
   b5f24:	4804      	ldr	r0, [pc, #16]	; (b5f38 <_Z22__fetch_global_Serial1v+0x44>)
   b5f26:	f000 f91d 	bl	b6164 <atexit>
    return serial1;
}
   b5f2a:	4802      	ldr	r0, [pc, #8]	; (b5f34 <_Z22__fetch_global_Serial1v+0x40>)
   b5f2c:	b007      	add	sp, #28
   b5f2e:	bd30      	pop	{r4, r5, pc}
   b5f30:	2003e744 	.word	0x2003e744
   b5f34:	2003e748 	.word	0x2003e748
   b5f38:	000b5ebd 	.word	0x000b5ebd

000b5f3c <_ZnajRKSt9nothrow_t>:
   b5f3c:	f7fe b8bd 	b.w	b40ba <_Znaj>

000b5f40 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b5f40:	4901      	ldr	r1, [pc, #4]	; (b5f48 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b5f42:	f000 b8f9 	b.w	b6138 <_ZNKSt9type_infoeqERKS_>
   b5f46:	bf00      	nop
   b5f48:	000b6574 	.word	0x000b6574

000b5f4c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b5f4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b5f4e:	2400      	movs	r4, #0
   b5f50:	2310      	movs	r3, #16
   b5f52:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b5f56:	6803      	ldr	r3, [r0, #0]
   b5f58:	4615      	mov	r5, r2
   b5f5a:	699e      	ldr	r6, [r3, #24]
   b5f5c:	6812      	ldr	r2, [r2, #0]
   b5f5e:	466b      	mov	r3, sp
   b5f60:	e9cd 4400 	strd	r4, r4, [sp]
   b5f64:	47b0      	blx	r6
   b5f66:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b5f6a:	f003 0306 	and.w	r3, r3, #6
   b5f6e:	2b06      	cmp	r3, #6
   b5f70:	bf03      	ittte	eq
   b5f72:	9b00      	ldreq	r3, [sp, #0]
   b5f74:	602b      	streq	r3, [r5, #0]
   b5f76:	2001      	moveq	r0, #1
   b5f78:	4620      	movne	r0, r4
   b5f7a:	b004      	add	sp, #16
   b5f7c:	bd70      	pop	{r4, r5, r6, pc}

000b5f7e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b5f7e:	9800      	ldr	r0, [sp, #0]
   b5f80:	4290      	cmp	r0, r2
   b5f82:	bf14      	ite	ne
   b5f84:	2001      	movne	r0, #1
   b5f86:	2006      	moveq	r0, #6
   b5f88:	4770      	bx	lr
	...

000b5f8c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b5f8c:	b510      	push	{r4, lr}
   b5f8e:	4b03      	ldr	r3, [pc, #12]	; (b5f9c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b5f90:	6003      	str	r3, [r0, #0]
   b5f92:	4604      	mov	r4, r0
   b5f94:	f000 f8cd 	bl	b6132 <_ZNSt9type_infoD1Ev>
   b5f98:	4620      	mov	r0, r4
   b5f9a:	bd10      	pop	{r4, pc}
   b5f9c:	000b65b4 	.word	0x000b65b4

000b5fa0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b5fa0:	b510      	push	{r4, lr}
   b5fa2:	4604      	mov	r4, r0
   b5fa4:	f7ff fff2 	bl	b5f8c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b5fa8:	4620      	mov	r0, r4
   b5faa:	2108      	movs	r1, #8
   b5fac:	f7fe f889 	bl	b40c2 <_ZdlPvj>
   b5fb0:	4620      	mov	r0, r4
   b5fb2:	bd10      	pop	{r4, pc}

000b5fb4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b5fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5fb8:	461f      	mov	r7, r3
   b5fba:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b5fbe:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b5fc2:	4598      	cmp	r8, r3
   b5fc4:	4606      	mov	r6, r0
   b5fc6:	4615      	mov	r5, r2
   b5fc8:	d107      	bne.n	b5fda <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b5fca:	9907      	ldr	r1, [sp, #28]
   b5fcc:	f000 f8b4 	bl	b6138 <_ZNKSt9type_infoeqERKS_>
   b5fd0:	b118      	cbz	r0, b5fda <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b5fd2:	7165      	strb	r5, [r4, #5]
   b5fd4:	2000      	movs	r0, #0
   b5fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5fda:	4639      	mov	r1, r7
   b5fdc:	4630      	mov	r0, r6
   b5fde:	f000 f8ab 	bl	b6138 <_ZNKSt9type_infoeqERKS_>
   b5fe2:	2800      	cmp	r0, #0
   b5fe4:	d0f6      	beq.n	b5fd4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b5fe6:	2301      	movs	r3, #1
   b5fe8:	f8c4 8000 	str.w	r8, [r4]
   b5fec:	7125      	strb	r5, [r4, #4]
   b5fee:	71a3      	strb	r3, [r4, #6]
   b5ff0:	e7f0      	b.n	b5fd4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b5ff2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b5ff2:	b538      	push	{r3, r4, r5, lr}
   b5ff4:	4615      	mov	r5, r2
   b5ff6:	461c      	mov	r4, r3
   b5ff8:	f000 f89e 	bl	b6138 <_ZNKSt9type_infoeqERKS_>
   b5ffc:	b120      	cbz	r0, b6008 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b5ffe:	2308      	movs	r3, #8
   b6000:	60e3      	str	r3, [r4, #12]
   b6002:	2306      	movs	r3, #6
   b6004:	6025      	str	r5, [r4, #0]
   b6006:	7123      	strb	r3, [r4, #4]
   b6008:	bd38      	pop	{r3, r4, r5, pc}

000b600a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b600a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b600c:	4605      	mov	r5, r0
   b600e:	460c      	mov	r4, r1
   b6010:	9201      	str	r2, [sp, #4]
   b6012:	461e      	mov	r6, r3
   b6014:	f000 f890 	bl	b6138 <_ZNKSt9type_infoeqERKS_>
   b6018:	b950      	cbnz	r0, b6030 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b601a:	2e03      	cmp	r6, #3
   b601c:	d808      	bhi.n	b6030 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b601e:	6823      	ldr	r3, [r4, #0]
   b6020:	9a01      	ldr	r2, [sp, #4]
   b6022:	695b      	ldr	r3, [r3, #20]
   b6024:	4629      	mov	r1, r5
   b6026:	4620      	mov	r0, r4
   b6028:	b002      	add	sp, #8
   b602a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b602e:	4718      	bx	r3
   b6030:	b002      	add	sp, #8
   b6032:	bd70      	pop	{r4, r5, r6, pc}

000b6034 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b6034:	b510      	push	{r4, lr}
   b6036:	4b03      	ldr	r3, [pc, #12]	; (b6044 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b6038:	6003      	str	r3, [r0, #0]
   b603a:	4604      	mov	r4, r0
   b603c:	f7ff ffa6 	bl	b5f8c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b6040:	4620      	mov	r0, r4
   b6042:	bd10      	pop	{r4, pc}
   b6044:	000b6614 	.word	0x000b6614

000b6048 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b6048:	b510      	push	{r4, lr}
   b604a:	4604      	mov	r4, r0
   b604c:	f7ff fff2 	bl	b6034 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b6050:	4620      	mov	r0, r4
   b6052:	210c      	movs	r1, #12
   b6054:	f7fe f835 	bl	b40c2 <_ZdlPvj>
   b6058:	4620      	mov	r0, r4
   b605a:	bd10      	pop	{r4, pc}

000b605c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b605c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b605e:	9f08      	ldr	r7, [sp, #32]
   b6060:	4297      	cmp	r7, r2
   b6062:	4605      	mov	r5, r0
   b6064:	460e      	mov	r6, r1
   b6066:	4614      	mov	r4, r2
   b6068:	d00a      	beq.n	b6080 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b606a:	68a8      	ldr	r0, [r5, #8]
   b606c:	6802      	ldr	r2, [r0, #0]
   b606e:	9708      	str	r7, [sp, #32]
   b6070:	6a15      	ldr	r5, [r2, #32]
   b6072:	4631      	mov	r1, r6
   b6074:	4622      	mov	r2, r4
   b6076:	46ac      	mov	ip, r5
   b6078:	b003      	add	sp, #12
   b607a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b607e:	4760      	bx	ip
   b6080:	4619      	mov	r1, r3
   b6082:	9301      	str	r3, [sp, #4]
   b6084:	f000 f858 	bl	b6138 <_ZNKSt9type_infoeqERKS_>
   b6088:	9b01      	ldr	r3, [sp, #4]
   b608a:	2800      	cmp	r0, #0
   b608c:	d0ed      	beq.n	b606a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b608e:	2006      	movs	r0, #6
   b6090:	b003      	add	sp, #12
   b6092:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6094 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b6094:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6098:	460d      	mov	r5, r1
   b609a:	4619      	mov	r1, r3
   b609c:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b60a0:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b60a4:	4681      	mov	r9, r0
   b60a6:	4617      	mov	r7, r2
   b60a8:	4698      	mov	r8, r3
   b60aa:	f000 f845 	bl	b6138 <_ZNKSt9type_infoeqERKS_>
   b60ae:	b190      	cbz	r0, b60d6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b60b0:	2d00      	cmp	r5, #0
   b60b2:	6034      	str	r4, [r6, #0]
   b60b4:	7137      	strb	r7, [r6, #4]
   b60b6:	db09      	blt.n	b60cc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b60b8:	1961      	adds	r1, r4, r5
   b60ba:	458a      	cmp	sl, r1
   b60bc:	bf0c      	ite	eq
   b60be:	2106      	moveq	r1, #6
   b60c0:	2101      	movne	r1, #1
   b60c2:	71b1      	strb	r1, [r6, #6]
   b60c4:	2000      	movs	r0, #0
   b60c6:	b001      	add	sp, #4
   b60c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b60cc:	3502      	adds	r5, #2
   b60ce:	d1f9      	bne.n	b60c4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b60d0:	2301      	movs	r3, #1
   b60d2:	71b3      	strb	r3, [r6, #6]
   b60d4:	e7f6      	b.n	b60c4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b60d6:	4554      	cmp	r4, sl
   b60d8:	d106      	bne.n	b60e8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b60da:	4659      	mov	r1, fp
   b60dc:	4648      	mov	r0, r9
   b60de:	f000 f82b 	bl	b6138 <_ZNKSt9type_infoeqERKS_>
   b60e2:	b108      	cbz	r0, b60e8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b60e4:	7177      	strb	r7, [r6, #5]
   b60e6:	e7ed      	b.n	b60c4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b60e8:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b60ec:	6803      	ldr	r3, [r0, #0]
   b60ee:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b60f2:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b60f6:	69dc      	ldr	r4, [r3, #28]
   b60f8:	463a      	mov	r2, r7
   b60fa:	4643      	mov	r3, r8
   b60fc:	4629      	mov	r1, r5
   b60fe:	46a4      	mov	ip, r4
   b6100:	b001      	add	sp, #4
   b6102:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6106:	4760      	bx	ip

000b6108 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b6108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b610c:	4607      	mov	r7, r0
   b610e:	460c      	mov	r4, r1
   b6110:	4615      	mov	r5, r2
   b6112:	461e      	mov	r6, r3
   b6114:	f7ff ff6d 	bl	b5ff2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b6118:	b948      	cbnz	r0, b612e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b611a:	68b8      	ldr	r0, [r7, #8]
   b611c:	6803      	ldr	r3, [r0, #0]
   b611e:	699f      	ldr	r7, [r3, #24]
   b6120:	462a      	mov	r2, r5
   b6122:	4633      	mov	r3, r6
   b6124:	4621      	mov	r1, r4
   b6126:	46bc      	mov	ip, r7
   b6128:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b612c:	4760      	bx	ip
   b612e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6132 <_ZNSt9type_infoD1Ev>:
   b6132:	4770      	bx	lr

000b6134 <_ZNKSt9type_info14__is_pointer_pEv>:
   b6134:	2000      	movs	r0, #0
   b6136:	4770      	bx	lr

000b6138 <_ZNKSt9type_infoeqERKS_>:
   b6138:	4281      	cmp	r1, r0
   b613a:	b508      	push	{r3, lr}
   b613c:	d00e      	beq.n	b615c <_ZNKSt9type_infoeqERKS_+0x24>
   b613e:	6840      	ldr	r0, [r0, #4]
   b6140:	7803      	ldrb	r3, [r0, #0]
   b6142:	2b2a      	cmp	r3, #42	; 0x2a
   b6144:	d00c      	beq.n	b6160 <_ZNKSt9type_infoeqERKS_+0x28>
   b6146:	6849      	ldr	r1, [r1, #4]
   b6148:	780b      	ldrb	r3, [r1, #0]
   b614a:	2b2a      	cmp	r3, #42	; 0x2a
   b614c:	bf08      	it	eq
   b614e:	3101      	addeq	r1, #1
   b6150:	f7fd ff64 	bl	b401c <strcmp>
   b6154:	fab0 f080 	clz	r0, r0
   b6158:	0940      	lsrs	r0, r0, #5
   b615a:	bd08      	pop	{r3, pc}
   b615c:	2001      	movs	r0, #1
   b615e:	e7fc      	b.n	b615a <_ZNKSt9type_infoeqERKS_+0x22>
   b6160:	2000      	movs	r0, #0
   b6162:	e7fa      	b.n	b615a <_ZNKSt9type_infoeqERKS_+0x22>

000b6164 <atexit>:
   b6164:	2300      	movs	r3, #0
   b6166:	4601      	mov	r1, r0
   b6168:	461a      	mov	r2, r3
   b616a:	4618      	mov	r0, r3
   b616c:	f000 b844 	b.w	b61f8 <__register_exitproc>

000b6170 <memcpy>:
   b6170:	440a      	add	r2, r1
   b6172:	4291      	cmp	r1, r2
   b6174:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b6178:	d100      	bne.n	b617c <memcpy+0xc>
   b617a:	4770      	bx	lr
   b617c:	b510      	push	{r4, lr}
   b617e:	f811 4b01 	ldrb.w	r4, [r1], #1
   b6182:	f803 4f01 	strb.w	r4, [r3, #1]!
   b6186:	4291      	cmp	r1, r2
   b6188:	d1f9      	bne.n	b617e <memcpy+0xe>
   b618a:	bd10      	pop	{r4, pc}

000b618c <memset>:
   b618c:	4402      	add	r2, r0
   b618e:	4603      	mov	r3, r0
   b6190:	4293      	cmp	r3, r2
   b6192:	d100      	bne.n	b6196 <memset+0xa>
   b6194:	4770      	bx	lr
   b6196:	f803 1b01 	strb.w	r1, [r3], #1
   b619a:	e7f9      	b.n	b6190 <memset+0x4>

000b619c <srand>:
   b619c:	b538      	push	{r3, r4, r5, lr}
   b619e:	4b10      	ldr	r3, [pc, #64]	; (b61e0 <srand+0x44>)
   b61a0:	681d      	ldr	r5, [r3, #0]
   b61a2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b61a4:	4604      	mov	r4, r0
   b61a6:	b9b3      	cbnz	r3, b61d6 <srand+0x3a>
   b61a8:	2018      	movs	r0, #24
   b61aa:	f7fe fed3 	bl	b4f54 <malloc>
   b61ae:	4602      	mov	r2, r0
   b61b0:	63a8      	str	r0, [r5, #56]	; 0x38
   b61b2:	b920      	cbnz	r0, b61be <srand+0x22>
   b61b4:	4b0b      	ldr	r3, [pc, #44]	; (b61e4 <srand+0x48>)
   b61b6:	480c      	ldr	r0, [pc, #48]	; (b61e8 <srand+0x4c>)
   b61b8:	2142      	movs	r1, #66	; 0x42
   b61ba:	f7fe feeb 	bl	b4f94 <__assert_func>
   b61be:	490b      	ldr	r1, [pc, #44]	; (b61ec <srand+0x50>)
   b61c0:	4b0b      	ldr	r3, [pc, #44]	; (b61f0 <srand+0x54>)
   b61c2:	e9c0 1300 	strd	r1, r3, [r0]
   b61c6:	4b0b      	ldr	r3, [pc, #44]	; (b61f4 <srand+0x58>)
   b61c8:	6083      	str	r3, [r0, #8]
   b61ca:	230b      	movs	r3, #11
   b61cc:	8183      	strh	r3, [r0, #12]
   b61ce:	2100      	movs	r1, #0
   b61d0:	2001      	movs	r0, #1
   b61d2:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b61d6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b61d8:	2200      	movs	r2, #0
   b61da:	611c      	str	r4, [r3, #16]
   b61dc:	615a      	str	r2, [r3, #20]
   b61de:	bd38      	pop	{r3, r4, r5, pc}
   b61e0:	2003e58c 	.word	0x2003e58c
   b61e4:	000b664d 	.word	0x000b664d
   b61e8:	000b6664 	.word	0x000b6664
   b61ec:	abcd330e 	.word	0xabcd330e
   b61f0:	e66d1234 	.word	0xe66d1234
   b61f4:	0005deec 	.word	0x0005deec

000b61f8 <__register_exitproc>:
   b61f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b61fc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b62b8 <__register_exitproc+0xc0>
   b6200:	4606      	mov	r6, r0
   b6202:	f8d8 0000 	ldr.w	r0, [r8]
   b6206:	461f      	mov	r7, r3
   b6208:	460d      	mov	r5, r1
   b620a:	4691      	mov	r9, r2
   b620c:	f000 f856 	bl	b62bc <__retarget_lock_acquire_recursive>
   b6210:	4b25      	ldr	r3, [pc, #148]	; (b62a8 <__register_exitproc+0xb0>)
   b6212:	681c      	ldr	r4, [r3, #0]
   b6214:	b934      	cbnz	r4, b6224 <__register_exitproc+0x2c>
   b6216:	4c25      	ldr	r4, [pc, #148]	; (b62ac <__register_exitproc+0xb4>)
   b6218:	601c      	str	r4, [r3, #0]
   b621a:	4b25      	ldr	r3, [pc, #148]	; (b62b0 <__register_exitproc+0xb8>)
   b621c:	b113      	cbz	r3, b6224 <__register_exitproc+0x2c>
   b621e:	681b      	ldr	r3, [r3, #0]
   b6220:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b6224:	6863      	ldr	r3, [r4, #4]
   b6226:	2b1f      	cmp	r3, #31
   b6228:	dd07      	ble.n	b623a <__register_exitproc+0x42>
   b622a:	f8d8 0000 	ldr.w	r0, [r8]
   b622e:	f000 f847 	bl	b62c0 <__retarget_lock_release_recursive>
   b6232:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b623a:	b34e      	cbz	r6, b6290 <__register_exitproc+0x98>
   b623c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b6240:	b988      	cbnz	r0, b6266 <__register_exitproc+0x6e>
   b6242:	4b1c      	ldr	r3, [pc, #112]	; (b62b4 <__register_exitproc+0xbc>)
   b6244:	b923      	cbnz	r3, b6250 <__register_exitproc+0x58>
   b6246:	f8d8 0000 	ldr.w	r0, [r8]
   b624a:	f000 f838 	bl	b62be <__retarget_lock_release>
   b624e:	e7f0      	b.n	b6232 <__register_exitproc+0x3a>
   b6250:	f44f 7084 	mov.w	r0, #264	; 0x108
   b6254:	f7fe fe7e 	bl	b4f54 <malloc>
   b6258:	2800      	cmp	r0, #0
   b625a:	d0f4      	beq.n	b6246 <__register_exitproc+0x4e>
   b625c:	2300      	movs	r3, #0
   b625e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b6262:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b6266:	6863      	ldr	r3, [r4, #4]
   b6268:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b626c:	2201      	movs	r2, #1
   b626e:	409a      	lsls	r2, r3
   b6270:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b6274:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b6278:	4313      	orrs	r3, r2
   b627a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b627e:	2e02      	cmp	r6, #2
   b6280:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b6284:	bf02      	ittt	eq
   b6286:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b628a:	4313      	orreq	r3, r2
   b628c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b6290:	6863      	ldr	r3, [r4, #4]
   b6292:	f8d8 0000 	ldr.w	r0, [r8]
   b6296:	1c5a      	adds	r2, r3, #1
   b6298:	3302      	adds	r3, #2
   b629a:	6062      	str	r2, [r4, #4]
   b629c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b62a0:	f000 f80e 	bl	b62c0 <__retarget_lock_release_recursive>
   b62a4:	2000      	movs	r0, #0
   b62a6:	e7c6      	b.n	b6236 <__register_exitproc+0x3e>
   b62a8:	2003e7e8 	.word	0x2003e7e8
   b62ac:	2003e75c 	.word	0x2003e75c
   b62b0:	00000000 	.word	0x00000000
   b62b4:	000b4f55 	.word	0x000b4f55
   b62b8:	2003e5f0 	.word	0x2003e5f0

000b62bc <__retarget_lock_acquire_recursive>:
   b62bc:	4770      	bx	lr

000b62be <__retarget_lock_release>:
   b62be:	4770      	bx	lr

000b62c0 <__retarget_lock_release_recursive>:
   b62c0:	4770      	bx	lr

000b62c2 <link_code_end>:
	...

000b62c4 <link_const_data_start>:
   b62c4:	514d0400 	.word	0x514d0400
   b62c8:	00045454 	.word	0x00045454
   b62cc:	49514d06 	.word	0x49514d06
   b62d0:	03706473 	.word	0x03706473

000b62d4 <dynalib_user>:
   b62d4:	000b4041 000b407d 000b40a5 000b40a9     A@..}@...@...@..
   b62e4:	00000000 2e62616c 77656874 632e6c63     ....lab.thewcl.c
   b62f4:	52006d6f 2f796d65 3162614c 6f4e2f37     om.Remy/Lab17/No
   b6304:	2f687472 65520067 4c2f796d 37316261     rth/g.Remy/Lab17
   b6314:	726f4e2f 792f6874 6d655200 614c2f79     /North/y.Remy/La
   b6324:	2f373162 74726f4e 00722f68 796d6552     b17/North/r.Remy
   b6334:	62614c2f 452f3731 2f747361 65520067     /Lab17/East/g.Re
   b6344:	4c2f796d 37316261 7361452f 00792f74     my/Lab17/East/y.
   b6354:	796d6552 62614c2f 452f3731 2f747361     Remy/Lab17/East/
   b6364:	65520072 4c2f796d 37316261 726f4e2f     r.Remy/Lab17/Nor
   b6374:	52006874 2f796d65 3162614c 61452f37     th.Remy/Lab17/Ea
   b6384:	00007473                                st..

000b6388 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000b6390 <_ZTVN5spark13EthernetClassE>:
	...
   b6398:	000b502b 000b5021 000b5017 000b500d     +P..!P...P...P..
   b63a8:	000b5001 000b4ff5 000b51b5 000b51bd     .P...O...Q...Q..
   b63b8:	000b4fe9 000b4fe1 000b4fd7 000b4fcd     .O...O...O...O..
   b63c8:	000b51ed                                .Q..

000b63cc <_ZTV9IPAddress>:
	...
   b63d4:	000b5059 000b5049 000b504b 00707061     YP..IP..KP..app.

000b63e4 <_ZTVN5spark12NetworkClassE>:
	...
   b63ec:	000b5175 000b517f 000b5189 000b5193     uQ...Q...Q...Q..
   b63fc:	000b519d 000b51a9 000b51b5 000b51bd     .Q...Q...Q...Q..
   b640c:	000b51c5 000b51d1 000b51d9 000b51e3     .Q...Q...Q...Q..
   b641c:	000b51ed 69726977 7200676e 20766365     .Q..wiring.recv 
   b642c:	6f727265 203d2072 00006425              error = %d..

000b6438 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b6440:	000b5555 000b5579 000b5aab 000b5587     UU..yU...Z...U..
   b6450:	000b5559                                YU..

000b6454 <_ZTV9TCPClient>:
	...
   b645c:	000b5605 000b5639 000b54d1 000b54eb     .V..9V...T...T..
   b646c:	000b5941 000b5515 000b57b7 000b5549     AY...U...W..IU..
   b647c:	000b5849 000b5689 000b57e5 000b59f5     IX...V...W...Y..
   b648c:	000b5785 000b554b 000b54fd 000b558d     .W..KU...T...U..
   b649c:	000b5669 252d5925 64252d6d 3a482554     iV..%Y-%m-%dT%H:
   b64ac:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

000b64bc <_ZTV11USARTSerial>:
	...
   b64c4:	000b5ac5 000b5b31 000b5b09 000b52d9     .Z..1[...[...R..
   b64d4:	000b5ad9 000b5af5 000b5ae7 000b5b03     .Z...Z...Z...[..
   b64e4:	000b5ac7 000b5acb                       .Z...Z..

000b64ec <_ZTV9USBSerial>:
	...
   b64f4:	000b5b6f 000b5bd7 000b5bad 000b52d9     o[...[...[...R..
   b6504:	000b5b9f 000b5b71 000b5b81 000b5bd1     .[..q[...[...[..
   b6514:	000b5b91 000b5b69                       .[..i[..

000b651c <_ZTVN5spark9WiFiClassE>:
	...
   b6524:	000b5ccf 000b5cc5 000b5cbb 000b5c71     .\...\...\..q\..
   b6534:	000b5caf 000b5ca3 000b51b5 000b51bd     .\...\...Q...Q..
   b6544:	000b5c97 000b5c8f 000b5c85 000b5c7b     .\...\...\..{\..
   b6554:	000b51ed                                .Q..

000b6558 <_ZSt7nothrow>:
	...

000b6559 <_ZTSSt19_Sp_make_shared_tag>:
   b6559:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   b6569:	5f646572 00676174                        red_tag....

000b6574 <_ZTISt19_Sp_make_shared_tag>:
   b6574:	000b65b4 000b6559                       .e..Ye..

000b657c <_ZTIN10__cxxabiv117__class_type_infoE>:
   b657c:	000b6614 000b6588 000b6638              .f...e..8f..

000b6588 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b6588:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   b6598:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   b65a8:	00000045                                E...

000b65ac <_ZTVN10__cxxabiv117__class_type_infoE>:
   b65ac:	00000000 000b657c 000b5f8d 000b5fa1     ....|e..._..._..
   b65bc:	000b6135 000b6135 000b600b 000b5f4d     5a..5a...`..M_..
   b65cc:	000b5ff3 000b5fb5 000b5f7f              ._..._..._..

000b65d8 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b65d8:	000b6614 000b65e4 000b657c              .f...e..|e..

000b65e4 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b65e4:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   b65f4:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   b6604:	456f666e 00000000                       nfoE....

000b660c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b660c:	00000000 000b65d8 000b6035 000b6049     .....e..5`..I`..
   b661c:	000b6135 000b6135 000b600b 000b5f4d     5a..5a...`..M_..
   b662c:	000b6109 000b6095 000b605d              .a...`..]`..

000b6638 <_ZTISt9type_info>:
   b6638:	000b65b4 000b6640                       .e..@f..

000b6640 <_ZTSSt9type_info>:
   b6640:	74397453 5f657079 6f666e69 45455200     St9type_info.REE
   b6650:	6d20544e 6f6c6c61 75732063 65656363     NT malloc succee
   b6660:	00646564 706d742f 6e656a2f 736e696b     ded./tmp/jenkins
   b6670:	4343472d 2d30312d 65706970 656e696c     -GCC-10-pipeline
   b6680:	5f38342d 30323032 34323131 3036315f     -48_20201124_160
   b6690:	30383136 2f393336 2f637273 6c77656e     6180639/src/newl
   b66a0:	6e2f6269 696c7765 696c2f62 732f6362     ib/newlib/libc/s
   b66b0:	696c6474 61722f62 632e646e               tdlib/rand.c.

000b66bd <link_const_data_end>:
   b66bd:	00          	.byte	0x00
	...

000b66c0 <link_constructors_location>:
   b66c0:	000b42d9 	.word	0x000b42d9
   b66c4:	000b4fbd 	.word	0x000b4fbd
   b66c8:	000b5035 	.word	0x000b5035
   b66cc:	000b5165 	.word	0x000b5165
   b66d0:	000b52c5 	.word	0x000b52c5
   b66d4:	000b536d 	.word	0x000b536d
   b66d8:	000b54ad 	.word	0x000b54ad
   b66dc:	000b5ab1 	.word	0x000b5ab1
   b66e0:	000b5cd9 	.word	0x000b5cd9
